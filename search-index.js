var searchIndex = JSON.parse('{\
"bit_vec":{"doc":"Collections implemented with bit vectors.","i":[[8,"BitBlock","bit_vec","Abstracts over a pile of bits (basically unsigned …",null,null],[10,"bits","","How many bits it has",0,[[],["usize",15]]],[11,"bytes","","How many bytes it has",0,[[],["usize",15]]],[10,"from_byte","","Convert a byte into this type (lowest-order bits set)",0,[[["u8",15]]]],[10,"count_ones","","Count the number of 1\'s in the bitwise repr",0,[[],["usize",15]]],[10,"zero","","Get <code>0</code>",0,[[]]],[10,"one","","Get <code>1</code>",0,[[]]],[3,"BitVec","","The bitvector type.",null,null],[11,"new","","Creates an empty <code>BitVec</code>.",1,[[]]],[11,"from_elem","","Creates a <code>BitVec</code> that holds <code>nbits</code> elements, setting each …",1,[[["usize",15],["bool",15]]]],[11,"with_capacity","","Constructs a new, empty <code>BitVec</code> with the specified …",1,[[["usize",15]]]],[11,"from_bytes","","Transforms a byte-vector into a <code>BitVec</code>. Each byte becomes …",1,[[]]],[11,"from_fn","","Creates a <code>BitVec</code> of the specified length where the value …",1,[[["usize",15]]]],[11,"blocks","","Iterator over the underlying blocks of data",1,[[],["blocks",3]]],[11,"storage","","Exposes the raw block storage of this BitVec",1,[[]]],[11,"storage_mut","","Exposes the raw block storage of this BitVec",1,[[],["vec",3]]],[11,"get","","Retrieves the value at index <code>i</code>, or <code>None</code> if the index is …",1,[[["usize",15]],[["bool",15],["option",4]]]],[11,"set","","Sets the value of a bit at an index <code>i</code>.",1,[[["usize",15],["bool",15]]]],[11,"set_all","","Sets all bits to 1.",1,[[]]],[11,"negate","","Flips all bits.",1,[[]]],[11,"union","","Calculates the union of two bitvectors. This acts like …",1,[[],["bool",15]]],[11,"intersect","","Calculates the intersection of two bitvectors. This acts …",1,[[],["bool",15]]],[11,"or","","Calculates the bitwise <code>or</code> of two bitvectors.",1,[[],["bool",15]]],[11,"and","","Calculates the bitwise <code>and</code> of two bitvectors.",1,[[],["bool",15]]],[11,"difference","","Calculates the difference between two bitvectors.",1,[[],["bool",15]]],[11,"xor","","Calculates the xor of two bitvectors.",1,[[],["bool",15]]],[11,"nand","","Calculates the nand of two bitvectors.",1,[[],["bool",15]]],[11,"nor","","Calculates the nor of two bitvectors.",1,[[],["bool",15]]],[11,"xnor","","Calculates the xnor of two bitvectors.",1,[[],["bool",15]]],[11,"all","","Returns <code>true</code> if all bits are 1.",1,[[],["bool",15]]],[11,"iter","","Returns an iterator over the elements of the vector in …",1,[[],["iter",3]]],[11,"append","","Moves all bits from <code>other</code> into <code>Self</code>, leaving <code>other</code> empty.",1,[[]]],[11,"split_off","","Splits the <code>BitVec</code> into two at the given bit, retaining …",1,[[["usize",15]]]],[11,"none","","Returns <code>true</code> if all bits are 0.",1,[[],["bool",15]]],[11,"any","","Returns <code>true</code> if any bit is 1.",1,[[],["bool",15]]],[11,"to_bytes","","Organises the bits into bytes, such that the first bit in …",1,[[],[["vec",3],["u8",15]]]],[11,"eq_vec","","Compares a <code>BitVec</code> to a slice of <code>bool</code>s. Both the <code>BitVec</code> …",1,[[],["bool",15]]],[11,"truncate","","Shortens a <code>BitVec</code>, dropping excess elements.",1,[[["usize",15]]]],[11,"reserve","","Reserves capacity for at least <code>additional</code> more bits to be …",1,[[["usize",15]]]],[11,"reserve_exact","","Reserves the minimum capacity for exactly <code>additional</code> more …",1,[[["usize",15]]]],[11,"capacity","","Returns the capacity in bits for this bit vector. …",1,[[],["usize",15]]],[11,"grow","","Grows the <code>BitVec</code> in-place, adding <code>n</code> copies of <code>value</code> to …",1,[[["usize",15],["bool",15]]]],[11,"pop","","Removes the last bit from the BitVec, and returns it. …",1,[[],[["bool",15],["option",4]]]],[11,"push","","Pushes a <code>bool</code> onto the end.",1,[[["bool",15]]]],[11,"len","","Returns the total number of bits in this vector",1,[[],["usize",15]]],[11,"set_len","","Sets the number of bits that this BitVec considers …",1,[[["usize",15]]]],[11,"is_empty","","Returns true if there are no bits in this vector",1,[[],["bool",15]]],[11,"clear","","Clears all bits in this vector.",1,[[]]],[11,"shrink_to_fit","","Shrinks the capacity of the underlying storage as much as …",1,[[]]],[3,"Iter","","An iterator for <code>BitVec</code>.",null,null],[3,"IntoIter","","",null,null],[3,"Blocks","","An iterator over the blocks of a <code>BitVec</code>.",null,null],[11,"from","","",1,[[]]],[11,"borrow","","",1,[[]]],[11,"borrow_mut","","",1,[[]]],[11,"try_from","","",1,[[],["result",4]]],[11,"into","","",1,[[]]],[11,"try_into","","",1,[[],["result",4]]],[11,"type_id","","",1,[[],["typeid",3]]],[11,"to_owned","","",1,[[]]],[11,"clone_into","","",1,[[]]],[11,"from","","",2,[[]]],[11,"borrow","","",2,[[]]],[11,"borrow_mut","","",2,[[]]],[11,"try_from","","",2,[[],["result",4]]],[11,"into","","",2,[[]]],[11,"try_into","","",2,[[],["result",4]]],[11,"into_iter","","",2,[[]]],[11,"type_id","","",2,[[],["typeid",3]]],[11,"to_owned","","",2,[[]]],[11,"clone_into","","",2,[[]]],[11,"from","","",3,[[]]],[11,"borrow","","",3,[[]]],[11,"borrow_mut","","",3,[[]]],[11,"try_from","","",3,[[],["result",4]]],[11,"into","","",3,[[]]],[11,"try_into","","",3,[[],["result",4]]],[11,"into_iter","","",3,[[]]],[11,"type_id","","",3,[[],["typeid",3]]],[11,"from","","",4,[[]]],[11,"borrow","","",4,[[]]],[11,"borrow_mut","","",4,[[]]],[11,"try_from","","",4,[[],["result",4]]],[11,"into","","",4,[[]]],[11,"try_into","","",4,[[],["result",4]]],[11,"into_iter","","",4,[[]]],[11,"type_id","","",4,[[],["typeid",3]]],[11,"to_owned","","",4,[[]]],[11,"clone_into","","",4,[[]]],[11,"fmt","","",1,[[["formatter",3]],["result",6]]],[11,"eq","","",1,[[],["bool",15]]],[11,"cmp","","",1,[[],["ordering",4]]],[11,"partial_cmp","","",1,[[],[["ordering",4],["option",4]]]],[11,"index","","",1,[[["usize",15]],["bool",15]]],[11,"hash","","",1,[[]]],[11,"from_iter","","",1,[[["intoiterator",8]]]],[11,"next_back","","",2,[[],[["bool",15],["option",4]]]],[11,"next_back","","",3,[[],[["bool",15],["option",4]]]],[11,"next_back","","",4,[[],["option",4]]],[11,"next","","",2,[[],[["bool",15],["option",4]]]],[11,"size_hint","","",2,[[]]],[11,"next","","",3,[[],[["bool",15],["option",4]]]],[11,"next","","",4,[[],["option",4]]],[11,"size_hint","","",4,[[]]],[11,"into_iter","","",1,[[],["intoiter",3]]],[11,"extend","","",1,[[["intoiterator",8]]]],[11,"clone","","",1,[[]]],[11,"clone_from","","",1,[[]]],[11,"clone","","",2,[[],["iter",3]]],[11,"clone","","",4,[[],["blocks",3]]],[11,"default","","",1,[[]]]],"p":[[8,"BitBlock"],[3,"BitVec"],[3,"Iter"],[3,"IntoIter"],[3,"Blocks"]]},\
"chrono":{"doc":"Chrono: Date and Time for RustIt aims to be a …","i":[[0,"prelude","chrono","A convenience module appropriate for glob imports (…",null,null],[0,"offset","","The time zone, which calculates offsets from the local …",null,null],[4,"LocalResult","chrono::offset","The conversion result from the local time to the …",null,null],[13,"None","","Given local time representation is invalid. This can …",0,null],[13,"Single","","Given local time representation has a single unique …",0,null],[13,"Ambiguous","","Given local time representation has multiple results and …",0,null],[11,"single","","Returns <code>Some</code> only when the conversion result is unique, …",0,[[],["option",4]]],[11,"earliest","","Returns <code>Some</code> for the earliest possible conversion result, …",0,[[],["option",4]]],[11,"latest","","Returns <code>Some</code> for the latest possible conversion result, …",0,[[],["option",4]]],[11,"map","","Maps a <code>LocalResult<T></code> into <code>LocalResult<U></code> with given …",0,[[["fnmut",8]],["localresult",4]]],[11,"and_time","","Makes a new <code>DateTime</code> from the current date and given …",0,[[["naivetime",3]],[["datetime",3],["localresult",4]]]],[11,"and_hms_opt","","Makes a new <code>DateTime</code> from the current date, hour, minute …",0,[[["u32",15]],[["datetime",3],["localresult",4]]]],[11,"and_hms_milli_opt","","Makes a new <code>DateTime</code> from the current date, hour, minute, …",0,[[["u32",15]],[["datetime",3],["localresult",4]]]],[11,"and_hms_micro_opt","","Makes a new <code>DateTime</code> from the current date, hour, minute, …",0,[[["u32",15]],[["datetime",3],["localresult",4]]]],[11,"and_hms_nano_opt","","Makes a new <code>DateTime</code> from the current date, hour, minute, …",0,[[["u32",15]],[["datetime",3],["localresult",4]]]],[11,"unwrap","","Returns the single unique conversion result, or panics …",0,[[]]],[8,"Offset","","The offset from the local time to UTC.",null,null],[10,"fix","","Returns the fixed offset from UTC to the local time …",1,[[],["fixedoffset",3]]],[8,"TimeZone","","The time zone.",null,null],[16,"Offset","","An associated offset type. This type is used to store the …",2,null],[11,"ymd","","Makes a new <code>Date</code> from year, month, day and the current …",2,[[["u32",15],["i32",15]],["date",3]]],[11,"ymd_opt","","Makes a new <code>Date</code> from year, month, day and the current …",2,[[["u32",15],["i32",15]],[["localresult",4],["date",3]]]],[11,"yo","","Makes a new <code>Date</code> from year, day of year (DOY or …",2,[[["u32",15],["i32",15]],["date",3]]],[11,"yo_opt","","Makes a new <code>Date</code> from year, day of year (DOY or …",2,[[["u32",15],["i32",15]],[["localresult",4],["date",3]]]],[11,"isoywd","","Makes a new <code>Date</code> from ISO week date (year and week …",2,[[["u32",15],["weekday",4],["i32",15]],["date",3]]],[11,"isoywd_opt","","Makes a new <code>Date</code> from ISO week date (year and week …",2,[[["u32",15],["weekday",4],["i32",15]],[["localresult",4],["date",3]]]],[11,"timestamp","","Makes a new <code>DateTime</code> from the number of non-leap seconds …",2,[[["i64",15],["u32",15]],["datetime",3]]],[11,"timestamp_opt","","Makes a new <code>DateTime</code> from the number of non-leap seconds …",2,[[["i64",15],["u32",15]],[["localresult",4],["datetime",3]]]],[11,"timestamp_millis","","Makes a new <code>DateTime</code> from the number of non-leap …",2,[[["i64",15]],["datetime",3]]],[11,"timestamp_millis_opt","","Makes a new <code>DateTime</code> from the number of non-leap …",2,[[["i64",15]],[["localresult",4],["datetime",3]]]],[11,"timestamp_nanos","","Makes a new <code>DateTime</code> from the number of non-leap …",2,[[["i64",15]],["datetime",3]]],[11,"datetime_from_str","","Parses a string with the specified format string and …",2,[[["str",15]],[["parseresult",6],["datetime",3]]]],[10,"from_offset","","Reconstructs the time zone from the offset.",2,[[]]],[10,"offset_from_local_date","","Creates the offset(s) for given local <code>NaiveDate</code> if …",2,[[["naivedate",3]],["localresult",4]]],[10,"offset_from_local_datetime","","Creates the offset(s) for given local <code>NaiveDateTime</code> if …",2,[[["naivedatetime",3]],["localresult",4]]],[11,"from_local_date","","Converts the local <code>NaiveDate</code> to the timezone-aware <code>Date</code> …",2,[[["naivedate",3]],[["localresult",4],["date",3]]]],[11,"from_local_datetime","","Converts the local <code>NaiveDateTime</code> to the timezone-aware …",2,[[["naivedatetime",3]],[["localresult",4],["datetime",3]]]],[10,"offset_from_utc_date","","Creates the offset for given UTC <code>NaiveDate</code>. This cannot …",2,[[["naivedate",3]]]],[10,"offset_from_utc_datetime","","Creates the offset for given UTC <code>NaiveDateTime</code>. This …",2,[[["naivedatetime",3]]]],[11,"from_utc_date","","Converts the UTC <code>NaiveDate</code> to the local time. The UTC is …",2,[[["naivedate",3]],["date",3]]],[11,"from_utc_datetime","","Converts the UTC <code>NaiveDateTime</code> to the local time. The UTC …",2,[[["naivedatetime",3]],["datetime",3]]],[3,"FixedOffset","","The time zone with fixed offset, from UTC-23:59:59 to …",null,null],[3,"Utc","","The UTC time zone. This is the most efficient time zone …",null,null],[0,"naive","chrono","Date and time types unconcerned with timezones.",null,null],[3,"NaiveDate","chrono::naive","ISO 8601 calendar date without timezone. Allows for every …",null,null],[17,"MAX_DATE","","The maximum possible <code>NaiveDate</code> (December 31, 262143 CE).",null,null],[17,"MIN_DATE","","The minimum possible <code>NaiveDate</code> (January 1, 262145 BCE).",null,null],[3,"NaiveDateTime","","ISO 8601 combined date and time without timezone.",null,null],[17,"MAX_DATETIME","","The maximum possible <code>NaiveDateTime</code>.",null,null],[17,"MIN_DATETIME","","The minimum possible <code>NaiveDateTime</code>.",null,null],[3,"IsoWeek","","ISO 8601 week.",null,null],[3,"NaiveTime","","ISO 8601 time without timezone. Allows for the nanosecond …",null,null],[0,"format","chrono","Formatting (and parsing) utilities for date and time.",null,null],[0,"strftime","chrono::format","<code>strftime</code>/<code>strptime</code>-inspired date and time formatting …",null,null],[3,"StrftimeItems","chrono::format::strftime","Parsing iterator for <code>strftime</code>-like format strings.",null,null],[11,"new","","Creates a new parsing iterator from the <code>strftime</code>-like …",3,[[["str",15]],["strftimeitems",3]]],[5,"parse","chrono::format","Tries to parse given string into <code>parsed</code> with given …",null,[[["str",15],["parsed",3]],["parseresult",6]]],[3,"Parsed","","Parsed parts of date and time. There are two classes of …",null,null],[12,"year","","Year.",4,null],[12,"year_div_100","","Year divided by 100. Implies that the year is >= 1 BCE …",4,null],[12,"year_mod_100","","Year modulo 100. Implies that the year is >= 1 BCE when …",4,null],[12,"isoyear","","Year in the ISO week date.",4,null],[12,"isoyear_div_100","","Year in the ISO week date, divided by 100. Implies that …",4,null],[12,"isoyear_mod_100","","Year in the ISO week date, modulo 100. Implies that the …",4,null],[12,"month","","Month (1--12).",4,null],[12,"week_from_sun","","Week number, where the week 1 starts at the first Sunday …",4,null],[12,"week_from_mon","","Week number, where the week 1 starts at the first Monday …",4,null],[12,"isoweek","","ISO week number (1--52 or 1--53 depending on the year).",4,null],[12,"weekday","","Day of the week.",4,null],[12,"ordinal","","Day of the year (1--365 or 1--366 depending on the year).",4,null],[12,"day","","Day of the month (1--28, 1--29, 1--30 or 1--31 depending …",4,null],[12,"hour_div_12","","Hour number divided by 12 (0--1). 0 indicates AM and 1 …",4,null],[12,"hour_mod_12","","Hour number modulo 12 (0--11).",4,null],[12,"minute","","Minute number (0--59).",4,null],[12,"second","","Second number (0--60, accounting for leap seconds).",4,null],[12,"nanosecond","","The number of nanoseconds since the whole second …",4,null],[12,"timestamp","","The number of non-leap seconds since the midnight UTC on …",4,null],[12,"offset","","Offset from the local time to UTC, in seconds.",4,null],[4,"Pad","","Padding characters for numeric items.",null,null],[13,"None","","No padding.",5,null],[13,"Zero","","Zero (<code>0</code>) padding.",5,null],[13,"Space","","Space padding.",5,null],[4,"Numeric","","Numeric item types. They have associated formatting width …",null,null],[13,"Year","","Full Gregorian year (FW=4, PW=∞). May accept years …",6,null],[13,"YearDiv100","","Gregorian year divided by 100 (century number; FW=PW=2). …",6,null],[13,"YearMod100","","Gregorian year modulo 100 (FW=PW=2). Cannot be negative.",6,null],[13,"IsoYear","","Year in the ISO week date (FW=4, PW=∞). May accept …",6,null],[13,"IsoYearDiv100","","Year in the ISO week date, divided by 100 (FW=PW=2). …",6,null],[13,"IsoYearMod100","","Year in the ISO week date, modulo 100 (FW=PW=2). Cannot …",6,null],[13,"Month","","Month (FW=PW=2).",6,null],[13,"Day","","Day of the month (FW=PW=2).",6,null],[13,"WeekFromSun","","Week number, where the week 1 starts at the first Sunday …",6,null],[13,"WeekFromMon","","Week number, where the week 1 starts at the first Monday …",6,null],[13,"IsoWeek","","Week number in the ISO week date (FW=PW=2).",6,null],[13,"NumDaysFromSun","","Day of the week, where Sunday = 0 and Saturday = 6 …",6,null],[13,"WeekdayFromMon","","Day of the week, where Monday = 1 and Sunday = 7 …",6,null],[13,"Ordinal","","Day of the year (FW=PW=3).",6,null],[13,"Hour","","Hour number in the 24-hour clocks (FW=PW=2).",6,null],[13,"Hour12","","Hour number in the 12-hour clocks (FW=PW=2).",6,null],[13,"Minute","","The number of minutes since the last whole hour (FW=PW=2).",6,null],[13,"Second","","The number of seconds since the last whole minute …",6,null],[13,"Nanosecond","","The number of nanoseconds since the last whole second …",6,null],[13,"Timestamp","","The number of non-leap seconds since the midnight UTC on …",6,null],[13,"Internal","","Internal uses only.",6,null],[3,"InternalNumeric","","An opaque type representing numeric item types for …",null,null],[4,"Fixed","","Fixed-format item types.",null,null],[13,"ShortMonthName","","Abbreviated month names.",7,null],[13,"LongMonthName","","Full month names.",7,null],[13,"ShortWeekdayName","","Abbreviated day of the week names.",7,null],[13,"LongWeekdayName","","Full day of the week names.",7,null],[13,"LowerAmPm","","AM/PM.",7,null],[13,"UpperAmPm","","AM/PM.",7,null],[13,"Nanosecond","","An optional dot plus one or more digits for left-aligned …",7,null],[13,"Nanosecond3","","Same as <code>Nanosecond</code> but the accuracy is fixed to 3.",7,null],[13,"Nanosecond6","","Same as <code>Nanosecond</code> but the accuracy is fixed to 6.",7,null],[13,"Nanosecond9","","Same as <code>Nanosecond</code> but the accuracy is fixed to 9.",7,null],[13,"TimezoneName","","Timezone name.",7,null],[13,"TimezoneOffsetColon","","Offset from the local time to UTC (<code>+09:00</code> or <code>-04:00</code> or …",7,null],[13,"TimezoneOffsetColonZ","","Offset from the local time to UTC (<code>+09:00</code> or <code>-04:00</code> or <code>Z</code>).",7,null],[13,"TimezoneOffset","","Same as <code>TimezoneOffsetColon</code> but prints no colon. Parsing …",7,null],[13,"TimezoneOffsetZ","","Same as <code>TimezoneOffsetColonZ</code> but prints no colon. Parsing …",7,null],[13,"RFC2822","","RFC 2822 date and time syntax. Commonly used for email …",7,null],[13,"RFC3339","","RFC 3339 & ISO 8601 date and time syntax.",7,null],[13,"Internal","","Internal uses only.",7,null],[3,"InternalFixed","","An opaque type representing fixed-format item types for …",null,null],[4,"Item","","A single formatting item. This is used for both …",null,null],[13,"Literal","","A literally printed and parsed text.",8,null],[13,"OwnedLiteral","","Same as <code>Literal</code> but with the string owned by the item.",8,null],[13,"Space","","Whitespace. Prints literally but reads zero or more …",8,null],[13,"OwnedSpace","","Same as <code>Space</code> but with the string owned by the item.",8,null],[13,"Numeric","","Numeric item. Can be optionally padded to the maximal …",8,null],[13,"Fixed","","Fixed-format item.",8,null],[13,"Error","","Issues a formatting error. Used to signal an invalid …",8,null],[3,"ParseError","","An error from the <code>parse</code> function.",null,null],[6,"ParseResult","","Same as <code>Result<T, ParseError></code>.",null,null],[5,"format_item","","Formats single formatting item",null,[[["formatter",3],["option",4],["option",4],["item",4],["option",4],["naivedate",3],["naivetime",3]],["result",6]]],[5,"format","","Tries to format given arguments with given formatting …",null,[[["formatter",3],["option",4],["option",4],["option",4],["naivedate",3],["naivetime",3]],["result",6]]],[3,"DelayedFormat","","A <em>temporary</em> object which can be used as an argument to …",null,null],[11,"new","","Makes a new <code>DelayedFormat</code> value out of local date and …",9,[[["naivetime",3],["option",4],["option",4],["naivedate",3]],["delayedformat",3]]],[11,"new_with_offset","","Makes a new <code>DelayedFormat</code> value out of local date and …",9,[[["naivetime",3],["option",4],["option",4],["naivedate",3]],["delayedformat",3]]],[3,"Duration","chrono","ISO 8601 time duration with nanosecond precision. This …",null,null],[3,"Date","","ISO 8601 calendar date with time zone.",null,null],[17,"MAX_DATE","","The maximum possible <code>Date</code>.",null,null],[17,"MIN_DATE","","The minimum possible <code>Date</code>.",null,null],[3,"DateTime","","ISO 8601 combined date and time with time zone.",null,null],[4,"SecondsFormat","","Specific formatting options for seconds. This may be …",null,null],[13,"Secs","","Format whole seconds only, with no decimal point nor …",10,null],[13,"Millis","","Use fixed 3 subsecond digits. This corresponds to …",10,null],[13,"Micros","","Use fixed 6 subsecond digits. This corresponds to …",10,null],[13,"Nanos","","Use fixed 9 subsecond digits. This corresponds to …",10,null],[13,"AutoSi","","Automatically select one of <code>Secs</code>, <code>Millis</code>, <code>Micros</code>, or <code>Nanos</code>…",10,null],[17,"MAX_DATETIME","","The maximum possible <code>DateTime<Utc></code>.",null,null],[17,"MIN_DATETIME","","The minimum possible <code>DateTime<Utc></code>.",null,null],[8,"DurationRound","","Extension trait for rounding or truncating a DateTime by …",null,null],[16,"Err","","Error that can occur in rounding or truncating",11,null],[10,"duration_round","","Return a copy rounded by Duration.",11,[[["duration",3]],["result",4]]],[10,"duration_trunc","","Return a copy truncated by Duration.",11,[[["duration",3]],["result",4]]],[4,"RoundingError","","An error from rounding by <code>Duration</code>",null,null],[13,"DurationExceedsTimestamp","","Error when the Duration exceeds the Duration from or …",12,null],[13,"DurationExceedsLimit","","Error when <code>Duration.num_nanoseconds</code> exceeds the limit.",12,null],[13,"TimestampExceedsLimit","","Error when <code>DateTime.timestamp_nanos</code> exceeds the limit.",12,null],[8,"SubsecRound","","Extension trait for subsecond rounding or truncation to a …",null,null],[10,"round_subsecs","","Return a copy rounded to the specified number of …",13,[[["u16",15]]]],[10,"trunc_subsecs","","Return a copy truncated to the specified number of …",13,[[["u16",15]]]],[4,"Weekday","","The day of week.",null,null],[13,"Mon","","Monday.",14,null],[13,"Tue","","Tuesday.",14,null],[13,"Wed","","Wednesday.",14,null],[13,"Thu","","Thursday.",14,null],[13,"Fri","","Friday.",14,null],[13,"Sat","","Saturday.",14,null],[13,"Sun","","Sunday.",14,null],[11,"succ","","The next day in the week.",14,[[],["weekday",4]]],[11,"pred","","The previous day in the week.",14,[[],["weekday",4]]],[11,"number_from_monday","","Returns a day-of-week number starting from Monday = 1. …",14,[[],["u32",15]]],[11,"number_from_sunday","","Returns a day-of-week number starting from Sunday = 1.",14,[[],["u32",15]]],[11,"num_days_from_monday","","Returns a day-of-week number starting from Monday = 0.",14,[[],["u32",15]]],[11,"num_days_from_sunday","","Returns a day-of-week number starting from Sunday = 0.",14,[[],["u32",15]]],[3,"ParseWeekdayError","","An error resulting from reading <code>Weekday</code> value with <code>FromStr</code>…",null,null],[4,"Month","","The month of the year.",null,null],[13,"January","","January",15,null],[13,"February","","February",15,null],[13,"March","","March",15,null],[13,"April","","April",15,null],[13,"May","","May",15,null],[13,"June","","June",15,null],[13,"July","","July",15,null],[13,"August","","August",15,null],[13,"September","","September",15,null],[13,"October","","October",15,null],[13,"November","","November",15,null],[13,"December","","December",15,null],[11,"succ","","The next month.",15,[[],["month",4]]],[11,"pred","","The previous month.",15,[[],["month",4]]],[11,"number_from_month","","Returns a month-of-year number starting from January = 1.",15,[[],["u32",15]]],[11,"name","","Get the name of the month",15,[[],["str",15]]],[3,"ParseMonthError","","An error resulting from reading <code><Month></code> value with <code>FromStr</code>…",null,null],[8,"Datelike","","The common set of methods for date component.",null,null],[10,"year","","Returns the year number in the calendar date.",16,[[],["i32",15]]],[11,"year_ce","","Returns the absolute year number starting from 1 with a …",16,[[]]],[10,"month","","Returns the month number starting from 1.",16,[[],["u32",15]]],[10,"month0","","Returns the month number starting from 0.",16,[[],["u32",15]]],[10,"day","","Returns the day of month starting from 1.",16,[[],["u32",15]]],[10,"day0","","Returns the day of month starting from 0.",16,[[],["u32",15]]],[10,"ordinal","","Returns the day of year starting from 1.",16,[[],["u32",15]]],[10,"ordinal0","","Returns the day of year starting from 0.",16,[[],["u32",15]]],[10,"weekday","","Returns the day of week.",16,[[],["weekday",4]]],[10,"iso_week","","Returns the ISO week.",16,[[],["isoweek",3]]],[10,"with_year","","Makes a new value with the year number changed.",16,[[["i32",15]],["option",4]]],[10,"with_month","","Makes a new value with the month number (starting from 1) …",16,[[["u32",15]],["option",4]]],[10,"with_month0","","Makes a new value with the month number (starting from 0) …",16,[[["u32",15]],["option",4]]],[10,"with_day","","Makes a new value with the day of month (starting from 1) …",16,[[["u32",15]],["option",4]]],[10,"with_day0","","Makes a new value with the day of month (starting from 0) …",16,[[["u32",15]],["option",4]]],[10,"with_ordinal","","Makes a new value with the day of year (starting from 1) …",16,[[["u32",15]],["option",4]]],[10,"with_ordinal0","","Makes a new value with the day of year (starting from 0) …",16,[[["u32",15]],["option",4]]],[11,"num_days_from_ce","","Counts the days in the proleptic Gregorian calendar, with …",16,[[],["i32",15]]],[8,"Timelike","","The common set of methods for time component.",null,null],[10,"hour","","Returns the hour number from 0 to 23.",17,[[],["u32",15]]],[11,"hour12","","Returns the hour number from 1 to 12 with a boolean flag, …",17,[[]]],[10,"minute","","Returns the minute number from 0 to 59.",17,[[],["u32",15]]],[10,"second","","Returns the second number from 0 to 59.",17,[[],["u32",15]]],[10,"nanosecond","","Returns the number of nanoseconds since the whole …",17,[[],["u32",15]]],[10,"with_hour","","Makes a new value with the hour number changed.",17,[[["u32",15]],["option",4]]],[10,"with_minute","","Makes a new value with the minute number changed.",17,[[["u32",15]],["option",4]]],[10,"with_second","","Makes a new value with the second number changed.",17,[[["u32",15]],["option",4]]],[10,"with_nanosecond","","Makes a new value with nanoseconds since the whole …",17,[[["u32",15]],["option",4]]],[11,"num_seconds_from_midnight","","Returns the number of non-leap seconds past the last …",17,[[],["u32",15]]],[11,"from","","",18,[[]]],[11,"into","","",18,[[]]],[11,"to_owned","","",18,[[]]],[11,"clone_into","","",18,[[]]],[11,"to_string","","",18,[[],["string",3]]],[11,"borrow","","",18,[[]]],[11,"borrow_mut","","",18,[[]]],[11,"try_from","","",18,[[],["result",4]]],[11,"try_into","","",18,[[],["result",4]]],[11,"type_id","","",18,[[],["typeid",3]]],[11,"from","chrono::offset","",19,[[]]],[11,"into","","",19,[[]]],[11,"to_owned","","",19,[[]]],[11,"clone_into","","",19,[[]]],[11,"to_string","","",19,[[],["string",3]]],[11,"borrow","","",19,[[]]],[11,"borrow_mut","","",19,[[]]],[11,"try_from","","",19,[[],["result",4]]],[11,"try_into","","",19,[[],["result",4]]],[11,"type_id","","",19,[[],["typeid",3]]],[11,"from","","",20,[[]]],[11,"into","","",20,[[]]],[11,"to_owned","","",20,[[]]],[11,"clone_into","","",20,[[]]],[11,"to_string","","",20,[[],["string",3]]],[11,"borrow","","",20,[[]]],[11,"borrow_mut","","",20,[[]]],[11,"try_from","","",20,[[],["result",4]]],[11,"try_into","","",20,[[],["result",4]]],[11,"type_id","","",20,[[],["typeid",3]]],[11,"from","","",0,[[]]],[11,"into","","",0,[[]]],[11,"to_owned","","",0,[[]]],[11,"clone_into","","",0,[[]]],[11,"borrow","","",0,[[]]],[11,"borrow_mut","","",0,[[]]],[11,"try_from","","",0,[[],["result",4]]],[11,"try_into","","",0,[[],["result",4]]],[11,"type_id","","",0,[[],["typeid",3]]],[11,"from","chrono::naive","",21,[[]]],[11,"into","","",21,[[]]],[11,"to_owned","","",21,[[]]],[11,"clone_into","","",21,[[]]],[11,"to_string","","",21,[[],["string",3]]],[11,"borrow","","",21,[[]]],[11,"borrow_mut","","",21,[[]]],[11,"try_from","","",21,[[],["result",4]]],[11,"try_into","","",21,[[],["result",4]]],[11,"type_id","","",21,[[],["typeid",3]]],[11,"from","","",22,[[]]],[11,"into","","",22,[[]]],[11,"to_owned","","",22,[[]]],[11,"clone_into","","",22,[[]]],[11,"to_string","","",22,[[],["string",3]]],[11,"borrow","","",22,[[]]],[11,"borrow_mut","","",22,[[]]],[11,"try_from","","",22,[[],["result",4]]],[11,"try_into","","",22,[[],["result",4]]],[11,"type_id","","",22,[[],["typeid",3]]],[11,"from","","",23,[[]]],[11,"into","","",23,[[]]],[11,"to_owned","","",23,[[]]],[11,"clone_into","","",23,[[]]],[11,"borrow","","",23,[[]]],[11,"borrow_mut","","",23,[[]]],[11,"try_from","","",23,[[],["result",4]]],[11,"try_into","","",23,[[],["result",4]]],[11,"type_id","","",23,[[],["typeid",3]]],[11,"from","","",24,[[]]],[11,"into","","",24,[[]]],[11,"to_owned","","",24,[[]]],[11,"clone_into","","",24,[[]]],[11,"to_string","","",24,[[],["string",3]]],[11,"borrow","","",24,[[]]],[11,"borrow_mut","","",24,[[]]],[11,"try_from","","",24,[[],["result",4]]],[11,"try_into","","",24,[[],["result",4]]],[11,"type_id","","",24,[[],["typeid",3]]],[11,"from","chrono","",25,[[]]],[11,"into","","",25,[[]]],[11,"to_owned","","",25,[[]]],[11,"clone_into","","",25,[[]]],[11,"to_string","","",25,[[],["string",3]]],[11,"borrow","","",25,[[]]],[11,"borrow_mut","","",25,[[]]],[11,"try_from","","",25,[[],["result",4]]],[11,"try_into","","",25,[[],["result",4]]],[11,"type_id","","",25,[[],["typeid",3]]],[11,"from","","",10,[[]]],[11,"into","","",10,[[]]],[11,"to_owned","","",10,[[]]],[11,"clone_into","","",10,[[]]],[11,"borrow","","",10,[[]]],[11,"borrow_mut","","",10,[[]]],[11,"try_from","","",10,[[],["result",4]]],[11,"try_into","","",10,[[],["result",4]]],[11,"type_id","","",10,[[],["typeid",3]]],[11,"from","","",26,[[]]],[11,"into","","",26,[[]]],[11,"to_owned","","",26,[[]]],[11,"clone_into","","",26,[[]]],[11,"to_string","","",26,[[],["string",3]]],[11,"borrow","","",26,[[]]],[11,"borrow_mut","","",26,[[]]],[11,"try_from","","",26,[[],["result",4]]],[11,"try_into","","",26,[[],["result",4]]],[11,"type_id","","",26,[[],["typeid",3]]],[11,"from","chrono::format","",4,[[]]],[11,"into","","",4,[[]]],[11,"to_owned","","",4,[[]]],[11,"clone_into","","",4,[[]]],[11,"borrow","","",4,[[]]],[11,"borrow_mut","","",4,[[]]],[11,"try_from","","",4,[[],["result",4]]],[11,"try_into","","",4,[[],["result",4]]],[11,"type_id","","",4,[[],["typeid",3]]],[11,"from","chrono::format::strftime","",3,[[]]],[11,"into","","",3,[[]]],[11,"into_iter","","",3,[[]]],[11,"to_owned","","",3,[[]]],[11,"clone_into","","",3,[[]]],[11,"borrow","","",3,[[]]],[11,"borrow_mut","","",3,[[]]],[11,"try_from","","",3,[[],["result",4]]],[11,"try_into","","",3,[[],["result",4]]],[11,"type_id","","",3,[[],["typeid",3]]],[11,"from","chrono::format","",5,[[]]],[11,"into","","",5,[[]]],[11,"to_owned","","",5,[[]]],[11,"clone_into","","",5,[[]]],[11,"borrow","","",5,[[]]],[11,"borrow_mut","","",5,[[]]],[11,"try_from","","",5,[[],["result",4]]],[11,"try_into","","",5,[[],["result",4]]],[11,"type_id","","",5,[[],["typeid",3]]],[11,"from","","",6,[[]]],[11,"into","","",6,[[]]],[11,"to_owned","","",6,[[]]],[11,"clone_into","","",6,[[]]],[11,"borrow","","",6,[[]]],[11,"borrow_mut","","",6,[[]]],[11,"try_from","","",6,[[],["result",4]]],[11,"try_into","","",6,[[],["result",4]]],[11,"type_id","","",6,[[],["typeid",3]]],[11,"from","","",27,[[]]],[11,"into","","",27,[[]]],[11,"to_owned","","",27,[[]]],[11,"clone_into","","",27,[[]]],[11,"borrow","","",27,[[]]],[11,"borrow_mut","","",27,[[]]],[11,"try_from","","",27,[[],["result",4]]],[11,"try_into","","",27,[[],["result",4]]],[11,"type_id","","",27,[[],["typeid",3]]],[11,"from","","",7,[[]]],[11,"into","","",7,[[]]],[11,"to_owned","","",7,[[]]],[11,"clone_into","","",7,[[]]],[11,"borrow","","",7,[[]]],[11,"borrow_mut","","",7,[[]]],[11,"try_from","","",7,[[],["result",4]]],[11,"try_into","","",7,[[],["result",4]]],[11,"type_id","","",7,[[],["typeid",3]]],[11,"from","","",28,[[]]],[11,"into","","",28,[[]]],[11,"to_owned","","",28,[[]]],[11,"clone_into","","",28,[[]]],[11,"borrow","","",28,[[]]],[11,"borrow_mut","","",28,[[]]],[11,"try_from","","",28,[[],["result",4]]],[11,"try_into","","",28,[[],["result",4]]],[11,"type_id","","",28,[[],["typeid",3]]],[11,"from","","",8,[[]]],[11,"into","","",8,[[]]],[11,"to_owned","","",8,[[]]],[11,"clone_into","","",8,[[]]],[11,"borrow","","",8,[[]]],[11,"borrow_mut","","",8,[[]]],[11,"try_from","","",8,[[],["result",4]]],[11,"try_into","","",8,[[],["result",4]]],[11,"type_id","","",8,[[],["typeid",3]]],[11,"from","","",29,[[]]],[11,"into","","",29,[[]]],[11,"to_owned","","",29,[[]]],[11,"clone_into","","",29,[[]]],[11,"to_string","","",29,[[],["string",3]]],[11,"borrow","","",29,[[]]],[11,"borrow_mut","","",29,[[]]],[11,"try_from","","",29,[[],["result",4]]],[11,"try_into","","",29,[[],["result",4]]],[11,"type_id","","",29,[[],["typeid",3]]],[11,"from","","",9,[[]]],[11,"into","","",9,[[]]],[11,"to_string","","",9,[[],["string",3]]],[11,"borrow","","",9,[[]]],[11,"borrow_mut","","",9,[[]]],[11,"try_from","","",9,[[],["result",4]]],[11,"try_into","","",9,[[],["result",4]]],[11,"type_id","","",9,[[],["typeid",3]]],[11,"from","chrono","",12,[[]]],[11,"into","","",12,[[]]],[11,"to_owned","","",12,[[]]],[11,"clone_into","","",12,[[]]],[11,"to_string","","",12,[[],["string",3]]],[11,"borrow","","",12,[[]]],[11,"borrow_mut","","",12,[[]]],[11,"try_from","","",12,[[],["result",4]]],[11,"try_into","","",12,[[],["result",4]]],[11,"type_id","","",12,[[],["typeid",3]]],[11,"from","","",14,[[]]],[11,"into","","",14,[[]]],[11,"to_owned","","",14,[[]]],[11,"clone_into","","",14,[[]]],[11,"to_string","","",14,[[],["string",3]]],[11,"borrow","","",14,[[]]],[11,"borrow_mut","","",14,[[]]],[11,"try_from","","",14,[[],["result",4]]],[11,"try_into","","",14,[[],["result",4]]],[11,"type_id","","",14,[[],["typeid",3]]],[11,"from","","",30,[[]]],[11,"into","","",30,[[]]],[11,"to_owned","","",30,[[]]],[11,"clone_into","","",30,[[]]],[11,"borrow","","",30,[[]]],[11,"borrow_mut","","",30,[[]]],[11,"try_from","","",30,[[],["result",4]]],[11,"try_into","","",30,[[],["result",4]]],[11,"type_id","","",30,[[],["typeid",3]]],[11,"from","","",15,[[]]],[11,"into","","",15,[[]]],[11,"to_owned","","",15,[[]]],[11,"clone_into","","",15,[[]]],[11,"borrow","","",15,[[]]],[11,"borrow_mut","","",15,[[]]],[11,"try_from","","",15,[[],["result",4]]],[11,"try_into","","",15,[[],["result",4]]],[11,"type_id","","",15,[[],["typeid",3]]],[11,"from","","",31,[[]]],[11,"into","","",31,[[]]],[11,"to_owned","","",31,[[]]],[11,"clone_into","","",31,[[]]],[11,"borrow","","",31,[[]]],[11,"borrow_mut","","",31,[[]]],[11,"try_from","","",31,[[],["result",4]]],[11,"try_into","","",31,[[],["result",4]]],[11,"type_id","","",31,[[],["typeid",3]]],[11,"fix","chrono::offset","",19,[[],["fixedoffset",3]]],[11,"fix","","",20,[[],["fixedoffset",3]]],[11,"from_offset","","",19,[[["fixedoffset",3]],["fixedoffset",3]]],[11,"offset_from_local_date","","",19,[[["naivedate",3]],[["fixedoffset",3],["localresult",4]]]],[11,"offset_from_local_datetime","","",19,[[["naivedatetime",3]],[["fixedoffset",3],["localresult",4]]]],[11,"offset_from_utc_date","","",19,[[["naivedate",3]],["fixedoffset",3]]],[11,"offset_from_utc_datetime","","",19,[[["naivedatetime",3]],["fixedoffset",3]]],[11,"from_offset","","",20,[[["utc",3]],["utc",3]]],[11,"offset_from_local_date","","",20,[[["naivedate",3]],[["utc",3],["localresult",4]]]],[11,"offset_from_local_datetime","","",20,[[["naivedatetime",3]],[["utc",3],["localresult",4]]]],[11,"offset_from_utc_date","","",20,[[["naivedate",3]],["utc",3]]],[11,"offset_from_utc_datetime","","",20,[[["naivedatetime",3]],["utc",3]]],[11,"duration_round","chrono","",26,[[["duration",3]],["result",4]]],[11,"duration_trunc","","",26,[[["duration",3]],["result",4]]],[11,"year","chrono::naive","Returns the year number in the calendar date.",21,[[],["i32",15]]],[11,"month","","Returns the month number starting from 1.",21,[[],["u32",15]]],[11,"month0","","Returns the month number starting from 0.",21,[[],["u32",15]]],[11,"day","","Returns the day of month starting from 1.",21,[[],["u32",15]]],[11,"day0","","Returns the day of month starting from 0.",21,[[],["u32",15]]],[11,"ordinal","","Returns the day of year starting from 1.",21,[[],["u32",15]]],[11,"ordinal0","","Returns the day of year starting from 0.",21,[[],["u32",15]]],[11,"weekday","","Returns the day of week.",21,[[],["weekday",4]]],[11,"iso_week","","",21,[[],["isoweek",3]]],[11,"with_year","","Makes a new <code>NaiveDate</code> with the year number changed.",21,[[["i32",15]],[["naivedate",3],["option",4]]]],[11,"with_month","","Makes a new <code>NaiveDate</code> with the month number (starting …",21,[[["u32",15]],[["naivedate",3],["option",4]]]],[11,"with_month0","","Makes a new <code>NaiveDate</code> with the month number (starting …",21,[[["u32",15]],[["naivedate",3],["option",4]]]],[11,"with_day","","Makes a new <code>NaiveDate</code> with the day of month (starting …",21,[[["u32",15]],[["naivedate",3],["option",4]]]],[11,"with_day0","","Makes a new <code>NaiveDate</code> with the day of month (starting …",21,[[["u32",15]],[["naivedate",3],["option",4]]]],[11,"with_ordinal","","Makes a new <code>NaiveDate</code> with the day of year (starting from …",21,[[["u32",15]],[["naivedate",3],["option",4]]]],[11,"with_ordinal0","","Makes a new <code>NaiveDate</code> with the day of year (starting from …",21,[[["u32",15]],[["naivedate",3],["option",4]]]],[11,"year","","Returns the year number in the calendar date.",22,[[],["i32",15]]],[11,"month","","Returns the month number starting from 1.",22,[[],["u32",15]]],[11,"month0","","Returns the month number starting from 0.",22,[[],["u32",15]]],[11,"day","","Returns the day of month starting from 1.",22,[[],["u32",15]]],[11,"day0","","Returns the day of month starting from 0.",22,[[],["u32",15]]],[11,"ordinal","","Returns the day of year starting from 1.",22,[[],["u32",15]]],[11,"ordinal0","","Returns the day of year starting from 0.",22,[[],["u32",15]]],[11,"weekday","","Returns the day of week.",22,[[],["weekday",4]]],[11,"iso_week","","",22,[[],["isoweek",3]]],[11,"with_year","","Makes a new <code>NaiveDateTime</code> with the year number changed.",22,[[["i32",15]],[["option",4],["naivedatetime",3]]]],[11,"with_month","","Makes a new <code>NaiveDateTime</code> with the month number (starting …",22,[[["u32",15]],[["option",4],["naivedatetime",3]]]],[11,"with_month0","","Makes a new <code>NaiveDateTime</code> with the month number (starting …",22,[[["u32",15]],[["option",4],["naivedatetime",3]]]],[11,"with_day","","Makes a new <code>NaiveDateTime</code> with the day of month (starting …",22,[[["u32",15]],[["option",4],["naivedatetime",3]]]],[11,"with_day0","","Makes a new <code>NaiveDateTime</code> with the day of month (starting …",22,[[["u32",15]],[["option",4],["naivedatetime",3]]]],[11,"with_ordinal","","Makes a new <code>NaiveDateTime</code> with the day of year (starting …",22,[[["u32",15]],[["option",4],["naivedatetime",3]]]],[11,"with_ordinal0","","Makes a new <code>NaiveDateTime</code> with the day of year (starting …",22,[[["u32",15]],[["option",4],["naivedatetime",3]]]],[11,"year","chrono","",25,[[],["i32",15]]],[11,"month","","",25,[[],["u32",15]]],[11,"month0","","",25,[[],["u32",15]]],[11,"day","","",25,[[],["u32",15]]],[11,"day0","","",25,[[],["u32",15]]],[11,"ordinal","","",25,[[],["u32",15]]],[11,"ordinal0","","",25,[[],["u32",15]]],[11,"weekday","","",25,[[],["weekday",4]]],[11,"iso_week","","",25,[[],["isoweek",3]]],[11,"with_year","","",25,[[["i32",15]],[["date",3],["option",4]]]],[11,"with_month","","",25,[[["u32",15]],[["date",3],["option",4]]]],[11,"with_month0","","",25,[[["u32",15]],[["date",3],["option",4]]]],[11,"with_day","","",25,[[["u32",15]],[["date",3],["option",4]]]],[11,"with_day0","","",25,[[["u32",15]],[["date",3],["option",4]]]],[11,"with_ordinal","","",25,[[["u32",15]],[["date",3],["option",4]]]],[11,"with_ordinal0","","",25,[[["u32",15]],[["date",3],["option",4]]]],[11,"year","","",26,[[],["i32",15]]],[11,"month","","",26,[[],["u32",15]]],[11,"month0","","",26,[[],["u32",15]]],[11,"day","","",26,[[],["u32",15]]],[11,"day0","","",26,[[],["u32",15]]],[11,"ordinal","","",26,[[],["u32",15]]],[11,"ordinal0","","",26,[[],["u32",15]]],[11,"weekday","","",26,[[],["weekday",4]]],[11,"iso_week","","",26,[[],["isoweek",3]]],[11,"with_year","","",26,[[["i32",15]],[["datetime",3],["option",4]]]],[11,"with_month","","",26,[[["u32",15]],[["datetime",3],["option",4]]]],[11,"with_month0","","",26,[[["u32",15]],[["datetime",3],["option",4]]]],[11,"with_day","","",26,[[["u32",15]],[["datetime",3],["option",4]]]],[11,"with_day0","","",26,[[["u32",15]],[["datetime",3],["option",4]]]],[11,"with_ordinal","","",26,[[["u32",15]],[["datetime",3],["option",4]]]],[11,"with_ordinal0","","",26,[[["u32",15]],[["datetime",3],["option",4]]]],[11,"hour","chrono::naive","Returns the hour number from 0 to 23.",22,[[],["u32",15]]],[11,"minute","","Returns the minute number from 0 to 59.",22,[[],["u32",15]]],[11,"second","","Returns the second number from 0 to 59.",22,[[],["u32",15]]],[11,"nanosecond","","Returns the number of nanoseconds since the whole …",22,[[],["u32",15]]],[11,"with_hour","","Makes a new <code>NaiveDateTime</code> with the hour number changed.",22,[[["u32",15]],[["option",4],["naivedatetime",3]]]],[11,"with_minute","","Makes a new <code>NaiveDateTime</code> with the minute number changed.",22,[[["u32",15]],[["option",4],["naivedatetime",3]]]],[11,"with_second","","Makes a new <code>NaiveDateTime</code> with the second number changed.",22,[[["u32",15]],[["option",4],["naivedatetime",3]]]],[11,"with_nanosecond","","Makes a new <code>NaiveDateTime</code> with nanoseconds since the …",22,[[["u32",15]],[["option",4],["naivedatetime",3]]]],[11,"hour","","Returns the hour number from 0 to 23.",24,[[],["u32",15]]],[11,"minute","","Returns the minute number from 0 to 59.",24,[[],["u32",15]]],[11,"second","","Returns the second number from 0 to 59.",24,[[],["u32",15]]],[11,"nanosecond","","Returns the number of nanoseconds since the whole …",24,[[],["u32",15]]],[11,"with_hour","","Makes a new <code>NaiveTime</code> with the hour number changed.",24,[[["u32",15]],[["naivetime",3],["option",4]]]],[11,"with_minute","","Makes a new <code>NaiveTime</code> with the minute number changed.",24,[[["u32",15]],[["naivetime",3],["option",4]]]],[11,"with_second","","Makes a new <code>NaiveTime</code> with the second number changed.",24,[[["u32",15]],[["naivetime",3],["option",4]]]],[11,"with_nanosecond","","Makes a new <code>NaiveTime</code> with nanoseconds since the whole …",24,[[["u32",15]],[["naivetime",3],["option",4]]]],[11,"num_seconds_from_midnight","","Returns the number of non-leap seconds past the last …",24,[[],["u32",15]]],[11,"hour","chrono","",26,[[],["u32",15]]],[11,"minute","","",26,[[],["u32",15]]],[11,"second","","",26,[[],["u32",15]]],[11,"nanosecond","","",26,[[],["u32",15]]],[11,"with_hour","","",26,[[["u32",15]],[["datetime",3],["option",4]]]],[11,"with_minute","","",26,[[["u32",15]],[["datetime",3],["option",4]]]],[11,"with_second","","",26,[[["u32",15]],[["datetime",3],["option",4]]]],[11,"with_nanosecond","","",26,[[["u32",15]],[["datetime",3],["option",4]]]],[11,"from","","Convert this <code>DateTime<Utc></code> instance into a …",26,[[["datetime",3],["utc",3]]]],[11,"from","","Convert this <code>DateTime<FixedOffset></code> instance into a …",26,[[["datetime",3],["fixedoffset",3]]]],[11,"from","","",26,[[["systemtime",3]],[["datetime",3],["utc",3]]]],[11,"next","chrono::format::strftime","",3,[[],[["option",4],["item",4]]]],[11,"clone","chrono","",18,[[],["duration",3]]],[11,"clone","chrono::offset","",0,[[],["localresult",4]]],[11,"clone","","",19,[[],["fixedoffset",3]]],[11,"clone","","",20,[[],["utc",3]]],[11,"clone","chrono::naive","",21,[[],["naivedate",3]]],[11,"clone","","",22,[[],["naivedatetime",3]]],[11,"clone","","",23,[[],["isoweek",3]]],[11,"clone","","",24,[[],["naivetime",3]]],[11,"clone","chrono","",25,[[],["date",3]]],[11,"clone","","",10,[[],["secondsformat",4]]],[11,"clone","","",26,[[],["datetime",3]]],[11,"clone","chrono::format","",5,[[],["pad",4]]],[11,"clone","","",6,[[],["numeric",4]]],[11,"clone","","",27,[[]]],[11,"clone","","",7,[[],["fixed",4]]],[11,"clone","","",28,[[],["internalfixed",3]]],[11,"clone","","",8,[[],["item",4]]],[11,"clone","","",29,[[],["parseerror",3]]],[11,"clone","","",4,[[],["parsed",3]]],[11,"clone","chrono::format::strftime","",3,[[],["strftimeitems",3]]],[11,"clone","chrono","",12,[[],["roundingerror",4]]],[11,"clone","","",14,[[],["weekday",4]]],[11,"clone","","",30,[[],["parseweekdayerror",3]]],[11,"clone","","",15,[[],["month",4]]],[11,"clone","","",31,[[],["parsemontherror",3]]],[11,"default","chrono::format","",4,[[],["parsed",3]]],[11,"cmp","chrono","",18,[[["duration",3]],["ordering",4]]],[11,"cmp","chrono::naive","",21,[[["naivedate",3]],["ordering",4]]],[11,"cmp","","",22,[[["naivedatetime",3]],["ordering",4]]],[11,"cmp","","",23,[[["isoweek",3]],["ordering",4]]],[11,"cmp","","",24,[[["naivetime",3]],["ordering",4]]],[11,"cmp","chrono","",25,[[["date",3]],["ordering",4]]],[11,"cmp","","",26,[[["datetime",3]],["ordering",4]]],[11,"eq","","",18,[[["duration",3]],["bool",15]]],[11,"ne","","",18,[[["duration",3]],["bool",15]]],[11,"eq","chrono::offset","",0,[[["localresult",4]],["bool",15]]],[11,"ne","","",0,[[["localresult",4]],["bool",15]]],[11,"eq","","",19,[[["fixedoffset",3]],["bool",15]]],[11,"ne","","",19,[[["fixedoffset",3]],["bool",15]]],[11,"eq","","",20,[[["utc",3]],["bool",15]]],[11,"eq","chrono::naive","",21,[[["naivedate",3]],["bool",15]]],[11,"ne","","",21,[[["naivedate",3]],["bool",15]]],[11,"eq","","",22,[[["naivedatetime",3]],["bool",15]]],[11,"ne","","",22,[[["naivedatetime",3]],["bool",15]]],[11,"eq","","",23,[[["isoweek",3]],["bool",15]]],[11,"ne","","",23,[[["isoweek",3]],["bool",15]]],[11,"eq","","",24,[[["naivetime",3]],["bool",15]]],[11,"ne","","",24,[[["naivetime",3]],["bool",15]]],[11,"eq","chrono","",25,[[["date",3]],["bool",15]]],[11,"eq","","",10,[[["secondsformat",4]],["bool",15]]],[11,"eq","","",26,[[["datetime",3]],["bool",15]]],[11,"eq","chrono::format","",5,[[["pad",4]],["bool",15]]],[11,"eq","","",6,[[["numeric",4]],["bool",15]]],[11,"ne","","",6,[[["numeric",4]],["bool",15]]],[11,"eq","","",27,[[["internalnumeric",3]],["bool",15]]],[11,"eq","","",7,[[["fixed",4]],["bool",15]]],[11,"ne","","",7,[[["fixed",4]],["bool",15]]],[11,"eq","","",28,[[["internalfixed",3]],["bool",15]]],[11,"ne","","",28,[[["internalfixed",3]],["bool",15]]],[11,"eq","","",8,[[["item",4]],["bool",15]]],[11,"ne","","",8,[[["item",4]],["bool",15]]],[11,"eq","","",29,[[["parseerror",3]],["bool",15]]],[11,"ne","","",29,[[["parseerror",3]],["bool",15]]],[11,"eq","","",4,[[["parsed",3]],["bool",15]]],[11,"ne","","",4,[[["parsed",3]],["bool",15]]],[11,"eq","chrono","",12,[[["roundingerror",4]],["bool",15]]],[11,"eq","","",14,[[["weekday",4]],["bool",15]]],[11,"eq","","",30,[[["parseweekdayerror",3]],["bool",15]]],[11,"ne","","",30,[[["parseweekdayerror",3]],["bool",15]]],[11,"eq","","",15,[[["month",4]],["bool",15]]],[11,"eq","","",31,[[["parsemontherror",3]],["bool",15]]],[11,"ne","","",31,[[["parsemontherror",3]],["bool",15]]],[11,"partial_cmp","","",18,[[["duration",3]],[["option",4],["ordering",4]]]],[11,"lt","","",18,[[["duration",3]],["bool",15]]],[11,"le","","",18,[[["duration",3]],["bool",15]]],[11,"gt","","",18,[[["duration",3]],["bool",15]]],[11,"ge","","",18,[[["duration",3]],["bool",15]]],[11,"partial_cmp","chrono::naive","",21,[[["naivedate",3]],[["option",4],["ordering",4]]]],[11,"lt","","",21,[[["naivedate",3]],["bool",15]]],[11,"le","","",21,[[["naivedate",3]],["bool",15]]],[11,"gt","","",21,[[["naivedate",3]],["bool",15]]],[11,"ge","","",21,[[["naivedate",3]],["bool",15]]],[11,"partial_cmp","","",22,[[["naivedatetime",3]],[["option",4],["ordering",4]]]],[11,"lt","","",22,[[["naivedatetime",3]],["bool",15]]],[11,"le","","",22,[[["naivedatetime",3]],["bool",15]]],[11,"gt","","",22,[[["naivedatetime",3]],["bool",15]]],[11,"ge","","",22,[[["naivedatetime",3]],["bool",15]]],[11,"partial_cmp","","",23,[[["isoweek",3]],[["option",4],["ordering",4]]]],[11,"lt","","",23,[[["isoweek",3]],["bool",15]]],[11,"le","","",23,[[["isoweek",3]],["bool",15]]],[11,"gt","","",23,[[["isoweek",3]],["bool",15]]],[11,"ge","","",23,[[["isoweek",3]],["bool",15]]],[11,"partial_cmp","","",24,[[["naivetime",3]],[["option",4],["ordering",4]]]],[11,"lt","","",24,[[["naivetime",3]],["bool",15]]],[11,"le","","",24,[[["naivetime",3]],["bool",15]]],[11,"gt","","",24,[[["naivetime",3]],["bool",15]]],[11,"ge","","",24,[[["naivetime",3]],["bool",15]]],[11,"partial_cmp","chrono","",25,[[["date",3]],[["option",4],["ordering",4]]]],[11,"partial_cmp","","Compare two DateTimes based on their true time, ignoring …",26,[[["datetime",3]],[["option",4],["ordering",4]]]],[11,"fmt","","",18,[[["formatter",3]],["result",6]]],[11,"fmt","chrono::offset","",0,[[["formatter",3]],["result",6]]],[11,"fmt","","",19,[[["formatter",3]],["result",6]]],[11,"fmt","","",20,[[["formatter",3]],["result",6]]],[11,"fmt","chrono::naive","",21,[[["formatter",3]],["result",6]]],[11,"fmt","","",22,[[["formatter",3]],["result",6]]],[11,"fmt","","",23,[[["formatter",3]],["result",6]]],[11,"fmt","","",24,[[["formatter",3]],["result",6]]],[11,"fmt","chrono","",25,[[["formatter",3]],["result",6]]],[11,"fmt","","",10,[[["formatter",3]],["result",6]]],[11,"fmt","","",26,[[["formatter",3]],["result",6]]],[11,"fmt","chrono::format","",5,[[["formatter",3]],["result",6]]],[11,"fmt","","",6,[[["formatter",3]],["result",6]]],[11,"fmt","","",27,[[["formatter",3]],["result",6]]],[11,"fmt","","",7,[[["formatter",3]],["result",6]]],[11,"fmt","","",28,[[["formatter",3]],["result",6]]],[11,"fmt","","",8,[[["formatter",3]],["result",6]]],[11,"fmt","","",29,[[["formatter",3]],["result",6]]],[11,"fmt","","",4,[[["formatter",3]],["result",6]]],[11,"fmt","chrono::format::strftime","",3,[[["formatter",3]],["result",6]]],[11,"fmt","chrono::format","",9,[[["formatter",3]],["result",6]]],[11,"fmt","chrono","",12,[[["formatter",3]],["result",6]]],[11,"fmt","","",14,[[["formatter",3]],["result",6]]],[11,"fmt","","",30,[[["formatter",3]],["result",6]]],[11,"fmt","","",15,[[["formatter",3]],["result",6]]],[11,"fmt","","",31,[[["formatter",3]],["result",6]]],[11,"fmt","","",18,[[["formatter",3]],["result",6]]],[11,"fmt","chrono::offset","",19,[[["formatter",3]],["result",6]]],[11,"fmt","","",20,[[["formatter",3]],["result",6]]],[11,"fmt","chrono::naive","",21,[[["formatter",3]],["result",6]]],[11,"fmt","","",22,[[["formatter",3]],["result",6]]],[11,"fmt","","",24,[[["formatter",3]],["result",6]]],[11,"fmt","chrono","",25,[[["formatter",3]],["result",6]]],[11,"fmt","","",26,[[["formatter",3]],["result",6]]],[11,"fmt","chrono::format","",29,[[["formatter",3]],["result",6]]],[11,"fmt","","",9,[[["formatter",3]],["result",6]]],[11,"fmt","chrono","",12,[[["formatter",3]],["result",6]]],[11,"fmt","","",14,[[["formatter",3]],["result",6]]],[11,"div","","",18,[[["i32",15]],["duration",3]]],[11,"sub","","",18,[[["duration",3]],["duration",3]]],[11,"sub","chrono::naive","",24,[[["fixedoffset",3]],["naivetime",3]]],[11,"sub","","",22,[[["fixedoffset",3]],["naivedatetime",3]]],[11,"sub","chrono","",26,[[["fixedoffset",3]],["datetime",3]]],[11,"sub","chrono::naive","",21,[[["oldduration",3]],["naivedate",3]]],[11,"sub","","",21,[[["naivedate",3]],["oldduration",3]]],[11,"sub","","",22,[[["oldduration",3]],["naivedatetime",3]]],[11,"sub","","",22,[[["naivedatetime",3]],["oldduration",3]]],[11,"sub","","",24,[[["oldduration",3]],["naivetime",3]]],[11,"sub","","",24,[[["naivetime",3]],["oldduration",3]]],[11,"sub","chrono","",25,[[["oldduration",3]],["date",3]]],[11,"sub","","",25,[[["date",3]],["oldduration",3]]],[11,"sub","","",26,[[["oldduration",3]],["datetime",3]]],[11,"sub","","",26,[[["datetime",3]],["oldduration",3]]],[11,"add","","",18,[[["duration",3]],["duration",3]]],[11,"add","chrono::naive","",24,[[["fixedoffset",3]],["naivetime",3]]],[11,"add","","",22,[[["fixedoffset",3]],["naivedatetime",3]]],[11,"add","chrono","",26,[[["fixedoffset",3]],["datetime",3]]],[11,"add","chrono::naive","",21,[[["oldduration",3]],["naivedate",3]]],[11,"add","","",22,[[["oldduration",3]],["naivedatetime",3]]],[11,"add","","",24,[[["oldduration",3]],["naivetime",3]]],[11,"add","chrono","",25,[[["oldduration",3]],["date",3]]],[11,"add","","",26,[[["oldduration",3]],["datetime",3]]],[11,"mul","","",18,[[["i32",15]],["duration",3]]],[11,"neg","","",18,[[],["duration",3]]],[11,"add_assign","chrono::naive","",21,[[["oldduration",3]]]],[11,"add_assign","","",22,[[["oldduration",3]]]],[11,"add_assign","","",24,[[["oldduration",3]]]],[11,"sub_assign","","",21,[[["oldduration",3]]]],[11,"sub_assign","","",22,[[["oldduration",3]]]],[11,"sub_assign","","",24,[[["oldduration",3]]]],[11,"hash","chrono::offset","",0,[[]]],[11,"hash","","",19,[[]]],[11,"hash","chrono::naive","",21,[[]]],[11,"hash","","",22,[[]]],[11,"hash","","",24,[[]]],[11,"hash","chrono","",25,[[]]],[11,"hash","","",26,[[]]],[11,"hash","","",14,[[]]],[11,"hash","","",15,[[]]],[11,"from_str","chrono::naive","",21,[[["str",15]],[["parseresult",6],["naivedate",3]]]],[11,"from_str","","",22,[[["str",15]],[["parseresult",6],["naivedatetime",3]]]],[11,"from_str","","",24,[[["str",15]],[["parseresult",6],["naivetime",3]]]],[11,"from_str","chrono","",26,[[["str",15]],[["datetime",3],["parseresult",6]]]],[11,"from_str","","",26,[[["str",15]],[["datetime",3],["parseresult",6]]]],[11,"from_str","","",14,[[["str",15]],["result",4]]],[11,"from_str","","",15,[[["str",15]],["result",4]]],[11,"description","chrono::format","",29,[[],["str",15]]],[11,"description","chrono","",12,[[],["str",15]]],[11,"from_i64","","",14,[[["i64",15]],[["option",4],["weekday",4]]]],[11,"from_u64","","",14,[[["u64",15]],[["option",4],["weekday",4]]]],[11,"from_u64","","Returns an Option from a i64, assuming a 1-index, January …",15,[[["u64",15]],[["month",4],["option",4]]]],[11,"from_i64","","",15,[[["i64",15]],[["month",4],["option",4]]]],[11,"from_u32","","",15,[[["u32",15]],[["month",4],["option",4]]]],[11,"weeks","","Makes a new <code>Duration</code> with given number of weeks. …",18,[[["i64",15]],["duration",3]]],[11,"days","","Makes a new <code>Duration</code> with given number of days. …",18,[[["i64",15]],["duration",3]]],[11,"hours","","Makes a new <code>Duration</code> with given number of hours. …",18,[[["i64",15]],["duration",3]]],[11,"minutes","","Makes a new <code>Duration</code> with given number of minutes. …",18,[[["i64",15]],["duration",3]]],[11,"seconds","","Makes a new <code>Duration</code> with given number of seconds. Panics …",18,[[["i64",15]],["duration",3]]],[11,"milliseconds","","Makes a new <code>Duration</code> with given number of milliseconds.",18,[[["i64",15]],["duration",3]]],[11,"microseconds","","Makes a new <code>Duration</code> with given number of microseconds.",18,[[["i64",15]],["duration",3]]],[11,"nanoseconds","","Makes a new <code>Duration</code> with given number of nanoseconds.",18,[[["i64",15]],["duration",3]]],[11,"num_weeks","","Returns the total number of whole weeks in the duration.",18,[[],["i64",15]]],[11,"num_days","","Returns the total number of whole days in the duration.",18,[[],["i64",15]]],[11,"num_hours","","Returns the total number of whole hours in the duration.",18,[[],["i64",15]]],[11,"num_minutes","","Returns the total number of whole minutes in the duration.",18,[[],["i64",15]]],[11,"num_seconds","","Returns the total number of whole seconds in the duration.",18,[[],["i64",15]]],[11,"num_milliseconds","","Returns the total number of whole milliseconds in the …",18,[[],["i64",15]]],[11,"num_microseconds","","Returns the total number of whole microseconds in the …",18,[[],[["i64",15],["option",4]]]],[11,"num_nanoseconds","","Returns the total number of whole nanoseconds in the …",18,[[],[["i64",15],["option",4]]]],[11,"checked_add","","Add two durations, returning <code>None</code> if overflow occurred.",18,[[["duration",3]],[["option",4],["duration",3]]]],[11,"checked_sub","","Subtract two durations, returning <code>None</code> if overflow …",18,[[["duration",3]],[["option",4],["duration",3]]]],[11,"abs","","Returns the duration as an absolute (non-negative) value.",18,[[],["duration",3]]],[11,"min_value","","The minimum possible <code>Duration</code>: <code>i64::MIN</code> milliseconds.",18,[[],["duration",3]]],[11,"max_value","","The maximum possible <code>Duration</code>: <code>i64::MAX</code> milliseconds.",18,[[],["duration",3]]],[11,"zero","","A duration where the stored seconds and nanoseconds are …",18,[[],["duration",3]]],[11,"is_zero","","Returns <code>true</code> if the duration equals <code>Duration::zero()</code>.",18,[[],["bool",15]]],[11,"from_std","","Creates a <code>time::Duration</code> object from <code>std::time::Duration</code>",18,[[["stdduration",3]],[["result",4],["duration",3],["outofrangeerror",3]]]],[11,"to_std","","Creates a <code>std::time::Duration</code> object from <code>time::Duration</code>",18,[[],[["result",4],["stdduration",3],["outofrangeerror",3]]]],[11,"east","chrono::offset","Makes a new <code>FixedOffset</code> for the Eastern Hemisphere with …",19,[[["i32",15]],["fixedoffset",3]]],[11,"east_opt","","Makes a new <code>FixedOffset</code> for the Eastern Hemisphere with …",19,[[["i32",15]],[["fixedoffset",3],["option",4]]]],[11,"west","","Makes a new <code>FixedOffset</code> for the Western Hemisphere with …",19,[[["i32",15]],["fixedoffset",3]]],[11,"west_opt","","Makes a new <code>FixedOffset</code> for the Western Hemisphere with …",19,[[["i32",15]],[["fixedoffset",3],["option",4]]]],[11,"local_minus_utc","","Returns the number of seconds to add to convert from UTC …",19,[[],["i32",15]]],[11,"utc_minus_local","","Returns the number of seconds to add to convert from the …",19,[[],["i32",15]]],[11,"from_ymd","chrono::naive","Makes a new <code>NaiveDate</code> from the calendar date (year, month …",21,[[["u32",15],["i32",15]],["naivedate",3]]],[11,"from_ymd_opt","","Makes a new <code>NaiveDate</code> from the calendar date (year, month …",21,[[["u32",15],["i32",15]],[["naivedate",3],["option",4]]]],[11,"from_yo","","Makes a new <code>NaiveDate</code> from the ordinal date (year and day …",21,[[["u32",15],["i32",15]],["naivedate",3]]],[11,"from_yo_opt","","Makes a new <code>NaiveDate</code> from the ordinal date (year and day …",21,[[["u32",15],["i32",15]],[["naivedate",3],["option",4]]]],[11,"from_isoywd","","Makes a new <code>NaiveDate</code> from the ISO week date (year, week …",21,[[["u32",15],["weekday",4],["i32",15]],["naivedate",3]]],[11,"from_isoywd_opt","","Makes a new <code>NaiveDate</code> from the ISO week date (year, week …",21,[[["u32",15],["weekday",4],["i32",15]],[["naivedate",3],["option",4]]]],[11,"from_num_days_from_ce","","Makes a new <code>NaiveDate</code> from a day\'s number in the …",21,[[["i32",15]],["naivedate",3]]],[11,"from_num_days_from_ce_opt","","Makes a new <code>NaiveDate</code> from a day\'s number in the …",21,[[["i32",15]],[["naivedate",3],["option",4]]]],[11,"from_weekday_of_month","","Makes a new <code>NaiveDate</code> by counting the number of …",21,[[["u32",15],["i32",15],["u8",15],["weekday",4]],["naivedate",3]]],[11,"from_weekday_of_month_opt","","Makes a new <code>NaiveDate</code> by counting the number of …",21,[[["u32",15],["i32",15],["u8",15],["weekday",4]],[["naivedate",3],["option",4]]]],[11,"parse_from_str","","Parses a string with the specified format string and …",21,[[["str",15]],[["parseresult",6],["naivedate",3]]]],[11,"and_time","","Makes a new <code>NaiveDateTime</code> from the current date and given …",21,[[["naivetime",3]],["naivedatetime",3]]],[11,"and_hms","","Makes a new <code>NaiveDateTime</code> from the current date, hour, …",21,[[["u32",15]],["naivedatetime",3]]],[11,"and_hms_opt","","Makes a new <code>NaiveDateTime</code> from the current date, hour, …",21,[[["u32",15]],[["option",4],["naivedatetime",3]]]],[11,"and_hms_milli","","Makes a new <code>NaiveDateTime</code> from the current date, hour, …",21,[[["u32",15]],["naivedatetime",3]]],[11,"and_hms_milli_opt","","Makes a new <code>NaiveDateTime</code> from the current date, hour, …",21,[[["u32",15]],[["option",4],["naivedatetime",3]]]],[11,"and_hms_micro","","Makes a new <code>NaiveDateTime</code> from the current date, hour, …",21,[[["u32",15]],["naivedatetime",3]]],[11,"and_hms_micro_opt","","Makes a new <code>NaiveDateTime</code> from the current date, hour, …",21,[[["u32",15]],[["option",4],["naivedatetime",3]]]],[11,"and_hms_nano","","Makes a new <code>NaiveDateTime</code> from the current date, hour, …",21,[[["u32",15]],["naivedatetime",3]]],[11,"and_hms_nano_opt","","Makes a new <code>NaiveDateTime</code> from the current date, hour, …",21,[[["u32",15]],[["option",4],["naivedatetime",3]]]],[11,"succ","","Makes a new <code>NaiveDate</code> for the next calendar date.",21,[[],["naivedate",3]]],[11,"succ_opt","","Makes a new <code>NaiveDate</code> for the next calendar date.",21,[[],[["naivedate",3],["option",4]]]],[11,"pred","","Makes a new <code>NaiveDate</code> for the previous calendar date.",21,[[],["naivedate",3]]],[11,"pred_opt","","Makes a new <code>NaiveDate</code> for the previous calendar date.",21,[[],[["naivedate",3],["option",4]]]],[11,"checked_add_signed","","Adds the <code>days</code> part of given <code>Duration</code> to the current date.",21,[[["oldduration",3]],[["naivedate",3],["option",4]]]],[11,"checked_sub_signed","","Subtracts the <code>days</code> part of given <code>Duration</code> from the …",21,[[["oldduration",3]],[["naivedate",3],["option",4]]]],[11,"signed_duration_since","","Subtracts another <code>NaiveDate</code> from the current date. …",21,[[["naivedate",3]],["oldduration",3]]],[11,"format_with_items","","Formats the date with the specified formatting items. …",21,[[],["delayedformat",3]]],[11,"format","","Formats the date with the specified format string. See …",21,[[["str",15]],[["delayedformat",3],["strftimeitems",3]]]],[11,"iter_days","","Returns an iterator that steps by days until the last …",21,[[],["naivedatedaysiterator",3]]],[11,"iter_weeks","","Returns an iterator that steps by weeks until the last …",21,[[],["naivedateweeksiterator",3]]],[11,"new","","Makes a new <code>NaiveDateTime</code> from date and time components. …",22,[[["naivedate",3],["naivetime",3]],["naivedatetime",3]]],[11,"from_timestamp","","Makes a new <code>NaiveDateTime</code> corresponding to a UTC date and …",22,[[["i64",15],["u32",15]],["naivedatetime",3]]],[11,"from_timestamp_opt","","Makes a new <code>NaiveDateTime</code> corresponding to a UTC date and …",22,[[["i64",15],["u32",15]],[["option",4],["naivedatetime",3]]]],[11,"parse_from_str","","Parses a string with the specified format string and …",22,[[["str",15]],[["parseresult",6],["naivedatetime",3]]]],[11,"date","","Retrieves a date component.",22,[[],["naivedate",3]]],[11,"time","","Retrieves a time component.",22,[[],["naivetime",3]]],[11,"timestamp","","Returns the number of non-leap seconds since the midnight …",22,[[],["i64",15]]],[11,"timestamp_millis","","Returns the number of non-leap <em>milliseconds</em> since …",22,[[],["i64",15]]],[11,"timestamp_nanos","","Returns the number of non-leap <em>nanoseconds</em> since midnight …",22,[[],["i64",15]]],[11,"timestamp_subsec_millis","","Returns the number of milliseconds since the last whole …",22,[[],["u32",15]]],[11,"timestamp_subsec_micros","","Returns the number of microseconds since the last whole …",22,[[],["u32",15]]],[11,"timestamp_subsec_nanos","","Returns the number of nanoseconds since the last whole …",22,[[],["u32",15]]],[11,"checked_add_signed","","Adds given <code>Duration</code> to the current date and time.",22,[[["oldduration",3]],[["option",4],["naivedatetime",3]]]],[11,"checked_sub_signed","","Subtracts given <code>Duration</code> from the current date and time.",22,[[["oldduration",3]],[["option",4],["naivedatetime",3]]]],[11,"signed_duration_since","","Subtracts another <code>NaiveDateTime</code> from the current date and …",22,[[["naivedatetime",3]],["oldduration",3]]],[11,"format_with_items","","Formats the combined date and time with the specified …",22,[[],["delayedformat",3]]],[11,"format","","Formats the combined date and time with the specified …",22,[[["str",15]],[["delayedformat",3],["strftimeitems",3]]]],[11,"year","","Returns the year number for this ISO week.",23,[[],["i32",15]]],[11,"week","","Returns the ISO week number starting from 1.",23,[[],["u32",15]]],[11,"week0","","Returns the ISO week number starting from 0.",23,[[],["u32",15]]],[11,"from_hms","","Makes a new <code>NaiveTime</code> from hour, minute and second.",24,[[["u32",15]],["naivetime",3]]],[11,"from_hms_opt","","Makes a new <code>NaiveTime</code> from hour, minute and second.",24,[[["u32",15]],[["naivetime",3],["option",4]]]],[11,"from_hms_milli","","Makes a new <code>NaiveTime</code> from hour, minute, second and …",24,[[["u32",15]],["naivetime",3]]],[11,"from_hms_milli_opt","","Makes a new <code>NaiveTime</code> from hour, minute, second and …",24,[[["u32",15]],[["naivetime",3],["option",4]]]],[11,"from_hms_micro","","Makes a new <code>NaiveTime</code> from hour, minute, second and …",24,[[["u32",15]],["naivetime",3]]],[11,"from_hms_micro_opt","","Makes a new <code>NaiveTime</code> from hour, minute, second and …",24,[[["u32",15]],[["naivetime",3],["option",4]]]],[11,"from_hms_nano","","Makes a new <code>NaiveTime</code> from hour, minute, second and …",24,[[["u32",15]],["naivetime",3]]],[11,"from_hms_nano_opt","","Makes a new <code>NaiveTime</code> from hour, minute, second and …",24,[[["u32",15]],[["naivetime",3],["option",4]]]],[11,"from_num_seconds_from_midnight","","Makes a new <code>NaiveTime</code> from the number of seconds since …",24,[[["u32",15]],["naivetime",3]]],[11,"from_num_seconds_from_midnight_opt","","Makes a new <code>NaiveTime</code> from the number of seconds since …",24,[[["u32",15]],[["naivetime",3],["option",4]]]],[11,"parse_from_str","","Parses a string with the specified format string and …",24,[[["str",15]],[["parseresult",6],["naivetime",3]]]],[11,"overflowing_add_signed","","Adds given <code>Duration</code> to the current time, and also returns …",24,[[["oldduration",3]]]],[11,"overflowing_sub_signed","","Subtracts given <code>Duration</code> from the current time, and also …",24,[[["oldduration",3]]]],[11,"signed_duration_since","","Subtracts another <code>NaiveTime</code> from the current time. …",24,[[["naivetime",3]],["oldduration",3]]],[11,"format_with_items","","Formats the time with the specified formatting items. …",24,[[],["delayedformat",3]]],[11,"format","","Formats the time with the specified format string. See …",24,[[["str",15]],[["delayedformat",3],["strftimeitems",3]]]],[11,"from_utc","chrono","Makes a new <code>Date</code> with given <em>UTC</em> date and offset. The …",25,[[["naivedate",3]],["date",3]]],[11,"and_time","","Makes a new <code>DateTime</code> from the current date and given …",25,[[["naivetime",3]],[["datetime",3],["option",4]]]],[11,"and_hms","","Makes a new <code>DateTime</code> from the current date, hour, minute …",25,[[["u32",15]],["datetime",3]]],[11,"and_hms_opt","","Makes a new <code>DateTime</code> from the current date, hour, minute …",25,[[["u32",15]],[["datetime",3],["option",4]]]],[11,"and_hms_milli","","Makes a new <code>DateTime</code> from the current date, hour, minute, …",25,[[["u32",15]],["datetime",3]]],[11,"and_hms_milli_opt","","Makes a new <code>DateTime</code> from the current date, hour, minute, …",25,[[["u32",15]],[["datetime",3],["option",4]]]],[11,"and_hms_micro","","Makes a new <code>DateTime</code> from the current date, hour, minute, …",25,[[["u32",15]],["datetime",3]]],[11,"and_hms_micro_opt","","Makes a new <code>DateTime</code> from the current date, hour, minute, …",25,[[["u32",15]],[["datetime",3],["option",4]]]],[11,"and_hms_nano","","Makes a new <code>DateTime</code> from the current date, hour, minute, …",25,[[["u32",15]],["datetime",3]]],[11,"and_hms_nano_opt","","Makes a new <code>DateTime</code> from the current date, hour, minute, …",25,[[["u32",15]],[["datetime",3],["option",4]]]],[11,"succ","","Makes a new <code>Date</code> for the next date.",25,[[],["date",3]]],[11,"succ_opt","","Makes a new <code>Date</code> for the next date.",25,[[],[["date",3],["option",4]]]],[11,"pred","","Makes a new <code>Date</code> for the prior date.",25,[[],["date",3]]],[11,"pred_opt","","Makes a new <code>Date</code> for the prior date.",25,[[],[["date",3],["option",4]]]],[11,"offset","","Retrieves an associated offset from UTC.",25,[[]]],[11,"timezone","","Retrieves an associated time zone.",25,[[]]],[11,"with_timezone","","Changes the associated time zone. This does not change …",25,[[],[["timezone",8],["date",3]]]],[11,"checked_add_signed","","Adds given <code>Duration</code> to the current date.",25,[[["oldduration",3]],[["date",3],["option",4]]]],[11,"checked_sub_signed","","Subtracts given <code>Duration</code> from the current date.",25,[[["oldduration",3]],[["date",3],["option",4]]]],[11,"signed_duration_since","","Subtracts another <code>Date</code> from the current date. Returns a …",25,[[["timezone",8],["date",3]],["oldduration",3]]],[11,"naive_utc","","Returns a view to the naive UTC date.",25,[[],["naivedate",3]]],[11,"naive_local","","Returns a view to the naive local date.",25,[[],["naivedate",3]]],[11,"format_with_items","","Formats the date with the specified formatting items.",25,[[],["delayedformat",3]]],[11,"format","","Formats the date with the specified format string. See …",25,[[["str",15]],[["delayedformat",3],["strftimeitems",3]]]],[11,"from_utc","","Makes a new <code>DateTime</code> with given <em>UTC</em> datetime and offset. …",26,[[["naivedatetime",3]],["datetime",3]]],[11,"date","","Retrieves a date component.",26,[[],["date",3]]],[11,"time","","Retrieves a time component. Unlike <code>date</code>, this is not …",26,[[],["naivetime",3]]],[11,"timestamp","","Returns the number of non-leap seconds since January 1, …",26,[[],["i64",15]]],[11,"timestamp_millis","","Returns the number of non-leap-milliseconds since January …",26,[[],["i64",15]]],[11,"timestamp_nanos","","Returns the number of non-leap-nanoseconds since January …",26,[[],["i64",15]]],[11,"timestamp_subsec_millis","","Returns the number of milliseconds since the last second …",26,[[],["u32",15]]],[11,"timestamp_subsec_micros","","Returns the number of microseconds since the last second …",26,[[],["u32",15]]],[11,"timestamp_subsec_nanos","","Returns the number of nanoseconds since the last second …",26,[[],["u32",15]]],[11,"offset","","Retrieves an associated offset from UTC.",26,[[]]],[11,"timezone","","Retrieves an associated time zone.",26,[[]]],[11,"with_timezone","","Changes the associated time zone. This does not change …",26,[[],[["timezone",8],["datetime",3]]]],[11,"checked_add_signed","","Adds given <code>Duration</code> to the current date and time.",26,[[["oldduration",3]],[["datetime",3],["option",4]]]],[11,"checked_sub_signed","","Subtracts given <code>Duration</code> from the current date and time.",26,[[["oldduration",3]],[["datetime",3],["option",4]]]],[11,"signed_duration_since","","Subtracts another <code>DateTime</code> from the current date and time.…",26,[[["timezone",8],["datetime",3]],["oldduration",3]]],[11,"naive_utc","","Returns a view to the naive UTC datetime.",26,[[],["naivedatetime",3]]],[11,"naive_local","","Returns a view to the naive local datetime.",26,[[],["naivedatetime",3]]],[11,"parse_from_rfc2822","","Parses an RFC 2822 date and time string such as …",26,[[["str",15]],[["datetime",3],["parseresult",6]]]],[11,"parse_from_rfc3339","","Parses an RFC 3339 and ISO 8601 date and time string such …",26,[[["str",15]],[["datetime",3],["parseresult",6]]]],[11,"parse_from_str","","Parses a string with the specified format string and …",26,[[["str",15]],[["datetime",3],["parseresult",6]]]],[11,"to_rfc2822","","Returns an RFC 2822 date and time string such as …",26,[[],["string",3]]],[11,"to_rfc3339","","Returns an RFC 3339 and ISO 8601 date and time string …",26,[[],["string",3]]],[11,"to_rfc3339_opts","","Return an RFC 3339 and ISO 8601 date and time string with …",26,[[["secondsformat",4],["bool",15]],["string",3]]],[11,"format_with_items","","Formats the combined date and time with the specified …",26,[[],["delayedformat",3]]],[11,"format","","Formats the combined date and time with the specified …",26,[[["str",15]],[["delayedformat",3],["strftimeitems",3]]]],[11,"new","chrono::format","Returns the initial value of parsed parts.",4,[[],["parsed",3]]],[11,"set_year","","Tries to set the <code>year</code> field from given value.",4,[[["i64",15]],["parseresult",6]]],[11,"set_year_div_100","","Tries to set the <code>year_div_100</code> field from given value.",4,[[["i64",15]],["parseresult",6]]],[11,"set_year_mod_100","","Tries to set the <code>year_mod_100</code> field from given value.",4,[[["i64",15]],["parseresult",6]]],[11,"set_isoyear","","Tries to set the <code>isoyear</code> field from given value.",4,[[["i64",15]],["parseresult",6]]],[11,"set_isoyear_div_100","","Tries to set the <code>isoyear_div_100</code> field from given value.",4,[[["i64",15]],["parseresult",6]]],[11,"set_isoyear_mod_100","","Tries to set the <code>isoyear_mod_100</code> field from given value.",4,[[["i64",15]],["parseresult",6]]],[11,"set_month","","Tries to set the <code>month</code> field from given value.",4,[[["i64",15]],["parseresult",6]]],[11,"set_week_from_sun","","Tries to set the <code>week_from_sun</code> field from given value.",4,[[["i64",15]],["parseresult",6]]],[11,"set_week_from_mon","","Tries to set the <code>week_from_mon</code> field from given value.",4,[[["i64",15]],["parseresult",6]]],[11,"set_isoweek","","Tries to set the <code>isoweek</code> field from given value.",4,[[["i64",15]],["parseresult",6]]],[11,"set_weekday","","Tries to set the <code>weekday</code> field from given value.",4,[[["weekday",4]],["parseresult",6]]],[11,"set_ordinal","","Tries to set the <code>ordinal</code> field from given value.",4,[[["i64",15]],["parseresult",6]]],[11,"set_day","","Tries to set the <code>day</code> field from given value.",4,[[["i64",15]],["parseresult",6]]],[11,"set_ampm","","Tries to set the <code>hour_div_12</code> field from given value. (…",4,[[["bool",15]],["parseresult",6]]],[11,"set_hour12","","Tries to set the <code>hour_mod_12</code> field from given hour number …",4,[[["i64",15]],["parseresult",6]]],[11,"set_hour","","Tries to set both <code>hour_div_12</code> and <code>hour_mod_12</code> fields from …",4,[[["i64",15]],["parseresult",6]]],[11,"set_minute","","Tries to set the <code>minute</code> field from given value.",4,[[["i64",15]],["parseresult",6]]],[11,"set_second","","Tries to set the <code>second</code> field from given value.",4,[[["i64",15]],["parseresult",6]]],[11,"set_nanosecond","","Tries to set the <code>nanosecond</code> field from given value.",4,[[["i64",15]],["parseresult",6]]],[11,"set_timestamp","","Tries to set the <code>timestamp</code> field from given value.",4,[[["i64",15]],["parseresult",6]]],[11,"set_offset","","Tries to set the <code>offset</code> field from given value.",4,[[["i64",15]],["parseresult",6]]],[11,"to_naive_date","","Returns a parsed naive date out of given fields.",4,[[],[["parseresult",6],["naivedate",3]]]],[11,"to_naive_time","","Returns a parsed naive time out of given fields.",4,[[],[["parseresult",6],["naivetime",3]]]],[11,"to_naive_datetime_with_offset","","Returns a parsed naive date and time out of given fields, …",4,[[["i32",15]],[["parseresult",6],["naivedatetime",3]]]],[11,"to_fixed_offset","","Returns a parsed fixed time zone offset out of given …",4,[[],[["parseresult",6],["fixedoffset",3]]]],[11,"to_datetime","","Returns a parsed timezone-aware date and time out of …",4,[[],[["datetime",3],["parseresult",6]]]],[11,"to_datetime_with_timezone","","Returns a parsed timezone-aware date and time out of …",4,[[],[["datetime",3],["parseresult",6]]]]],"p":[[4,"LocalResult"],[8,"Offset"],[8,"TimeZone"],[3,"StrftimeItems"],[3,"Parsed"],[4,"Pad"],[4,"Numeric"],[4,"Fixed"],[4,"Item"],[3,"DelayedFormat"],[4,"SecondsFormat"],[8,"DurationRound"],[4,"RoundingError"],[8,"SubsecRound"],[4,"Weekday"],[4,"Month"],[8,"Datelike"],[8,"Timelike"],[3,"Duration"],[3,"FixedOffset"],[3,"Utc"],[3,"NaiveDate"],[3,"NaiveDateTime"],[3,"IsoWeek"],[3,"NaiveTime"],[3,"Date"],[3,"DateTime"],[3,"InternalNumeric"],[3,"InternalFixed"],[3,"ParseError"],[3,"ParseWeekdayError"],[3,"ParseMonthError"]]},\
"num_bigint":{"doc":"A Big integer (signed version: <code>BigInt</code>, unsigned version: …","i":[[3,"ParseBigIntError","num_bigint","",null,null],[3,"TryFromBigIntError","","The error type returned when a checked conversion …",null,null],[11,"into_original","","Extract the original value, if available. The value will …",0,[[]]],[3,"BigUint","","A big unsigned integer type.",null,null],[8,"ToBigUint","","A generic trait for converting a value to a <code>BigUint</code>.",null,null],[10,"to_biguint","","Converts the value of <code>self</code> to a <code>BigUint</code>.",1,[[],[["option",4],["biguint",3]]]],[3,"U32Digits","","An iterator of <code>u32</code> digits representation of a <code>BigUint</code> or …",null,null],[3,"U64Digits","","An iterator of <code>u64</code> digits representation of a <code>BigUint</code> or …",null,null],[3,"BigInt","","A big signed integer type.",null,null],[4,"Sign","","A Sign is a <code>BigInt</code>\'s composing element.",null,null],[13,"Minus","","",2,null],[13,"NoSign","","",2,null],[13,"Plus","","",2,null],[8,"ToBigInt","","A generic trait for converting a value to a <code>BigInt</code>. This …",null,null],[10,"to_bigint","","Converts the value of <code>self</code> to a <code>BigInt</code>.",3,[[],[["option",4],["bigint",3]]]],[11,"from","","",2,[[]]],[11,"borrow","","",2,[[]]],[11,"borrow_mut","","",2,[[]]],[11,"try_from","","",2,[[],["result",4]]],[11,"into","","",2,[[]]],[11,"try_into","","",2,[[],["result",4]]],[11,"type_id","","",2,[[],["typeid",3]]],[11,"to_owned","","",2,[[]]],[11,"clone_into","","",2,[[]]],[11,"from","","",4,[[]]],[11,"borrow","","",4,[[]]],[11,"borrow_mut","","",4,[[]]],[11,"try_from","","",4,[[],["result",4]]],[11,"into","","",4,[[]]],[11,"try_into","","",4,[[],["result",4]]],[11,"type_id","","",4,[[],["typeid",3]]],[11,"to_owned","","",4,[[]]],[11,"clone_into","","",4,[[]]],[11,"to_string","","",4,[[],["string",3]]],[11,"average_floor","","Returns the floor value of the average of <code>self</code> and <code>other</code>.",4,[[]]],[11,"average_ceil","","Returns the ceil value of the average of <code>self</code> and <code>other</code>.",4,[[]]],[11,"from","","",5,[[]]],[11,"borrow","","",5,[[]]],[11,"borrow_mut","","",5,[[]]],[11,"try_from","","",5,[[],["result",4]]],[11,"into","","",5,[[]]],[11,"try_into","","",5,[[],["result",4]]],[11,"into_iter","","",5,[[]]],[11,"type_id","","",5,[[],["typeid",3]]],[11,"from","","",6,[[]]],[11,"borrow","","",6,[[]]],[11,"borrow_mut","","",6,[[]]],[11,"try_from","","",6,[[],["result",4]]],[11,"into","","",6,[[]]],[11,"try_into","","",6,[[],["result",4]]],[11,"into_iter","","",6,[[]]],[11,"type_id","","",6,[[],["typeid",3]]],[11,"from","","",7,[[]]],[11,"borrow","","",7,[[]]],[11,"borrow_mut","","",7,[[]]],[11,"try_from","","",7,[[],["result",4]]],[11,"into","","",7,[[]]],[11,"try_into","","",7,[[],["result",4]]],[11,"type_id","","",7,[[],["typeid",3]]],[11,"to_owned","","",7,[[]]],[11,"clone_into","","",7,[[]]],[11,"to_string","","",7,[[],["string",3]]],[11,"average_floor","","Returns the floor value of the average of <code>self</code> and <code>other</code>.",7,[[]]],[11,"average_ceil","","Returns the ceil value of the average of <code>self</code> and <code>other</code>.",7,[[]]],[11,"from","","",8,[[]]],[11,"borrow","","",8,[[]]],[11,"borrow_mut","","",8,[[]]],[11,"try_from","","",8,[[],["result",4]]],[11,"into","","",8,[[]]],[11,"try_into","","",8,[[],["result",4]]],[11,"type_id","","",8,[[],["typeid",3]]],[11,"to_owned","","",8,[[]]],[11,"clone_into","","",8,[[]]],[11,"to_string","","",8,[[],["string",3]]],[11,"from","","",0,[[]]],[11,"borrow","","",0,[[]]],[11,"borrow_mut","","",0,[[]]],[11,"try_from","","",0,[[],["result",4]]],[11,"into","","",0,[[]]],[11,"try_into","","",0,[[],["result",4]]],[11,"type_id","","",0,[[],["typeid",3]]],[11,"to_owned","","",0,[[]]],[11,"clone_into","","",0,[[]]],[11,"to_string","","",0,[[],["string",3]]],[11,"to_bigint","","",4,[[],[["option",4],["bigint",3]]]],[11,"to_bigint","","",7,[[],[["option",4],["bigint",3]]]],[11,"to_biguint","","",4,[[],[["option",4],["biguint",3]]]],[11,"to_biguint","","",7,[[],[["option",4],["biguint",3]]]],[11,"from","","",4,[[["i64",15]]]],[11,"from","","",4,[[["i128",15]]]],[11,"from","","",4,[[["i8",15]]]],[11,"from","","",4,[[["i16",15]]]],[11,"from","","",4,[[["i32",15]]]],[11,"from","","",4,[[["isize",15]]]],[11,"from","","",4,[[["u64",15]]]],[11,"from","","",4,[[["u128",15]]]],[11,"from","","",4,[[["u8",15]]]],[11,"from","","",4,[[["u16",15]]]],[11,"from","","",4,[[["u32",15]]]],[11,"from","","",4,[[["usize",15]]]],[11,"from","","",4,[[["biguint",3]]]],[11,"from","","",7,[[["u64",15]]]],[11,"from","","",7,[[["u128",15]]]],[11,"from","","",7,[[["u8",15]]]],[11,"from","","",7,[[["u16",15]]]],[11,"from","","",7,[[["u32",15]]]],[11,"from","","",7,[[["usize",15]]]],[11,"fmt","","",2,[[["formatter",3]],["result",6]]],[11,"fmt","","",4,[[["formatter",3]],["result",6]]],[11,"fmt","","",7,[[["formatter",3]],["result",6]]],[11,"fmt","","",8,[[["formatter",3]],["result",6]]],[11,"fmt","","",0,[[["formatter",3]],["result",6]]],[11,"fmt","","",4,[[["formatter",3]],["result",6]]],[11,"fmt","","",7,[[["formatter",3]],["result",6]]],[11,"fmt","","",8,[[["formatter",3]],["result",6]]],[11,"fmt","","",0,[[["formatter",3]],["result",6]]],[11,"div","","",4,[[["bigint",3]],["bigint",3]]],[11,"div","","",4,[[["bigint",3]],["bigint",3]]],[11,"div","","",4,[[["u8",15]],["bigint",3]]],[11,"div","","",4,[[["u8",15]],["bigint",3]]],[11,"div","","",4,[[["u16",15]],["bigint",3]]],[11,"div","","",4,[[["u16",15]],["bigint",3]]],[11,"div","","",4,[[["usize",15]],["bigint",3]]],[11,"div","","",4,[[["usize",15]],["bigint",3]]],[11,"div","","",4,[[["i8",15]],["bigint",3]]],[11,"div","","",4,[[["i8",15]],["bigint",3]]],[11,"div","","",4,[[["i16",15]],["bigint",3]]],[11,"div","","",4,[[["i16",15]],["bigint",3]]],[11,"div","","",4,[[["isize",15]],["bigint",3]]],[11,"div","","",4,[[["isize",15]],["bigint",3]]],[11,"div","","",4,[[["u32",15]],["bigint",3]]],[11,"div","","",4,[[["u64",15]],["bigint",3]]],[11,"div","","",4,[[["u128",15]],["bigint",3]]],[11,"div","","",4,[[["u32",15]],["bigint",3]]],[11,"div","","",4,[[["u64",15]],["bigint",3]]],[11,"div","","",4,[[["u128",15]],["bigint",3]]],[11,"div","","",4,[[["i32",15]],["bigint",3]]],[11,"div","","",4,[[["i64",15]],["bigint",3]]],[11,"div","","",4,[[["i128",15]],["bigint",3]]],[11,"div","","",4,[[["i32",15]],["bigint",3]]],[11,"div","","",4,[[["i64",15]],["bigint",3]]],[11,"div","","",4,[[["i128",15]],["bigint",3]]],[11,"div","","",7,[[["biguint",3]],["biguint",3]]],[11,"div","","",7,[[["biguint",3]],["biguint",3]]],[11,"div","","",7,[[["u8",15]],["biguint",3]]],[11,"div","","",7,[[["u8",15]],["biguint",3]]],[11,"div","","",7,[[["u16",15]],["biguint",3]]],[11,"div","","",7,[[["u16",15]],["biguint",3]]],[11,"div","","",7,[[["usize",15]],["biguint",3]]],[11,"div","","",7,[[["usize",15]],["biguint",3]]],[11,"div","","",7,[[["u32",15]],["biguint",3]]],[11,"div","","",7,[[["u64",15]],["biguint",3]]],[11,"div","","",7,[[["u128",15]],["biguint",3]]],[11,"div","","",7,[[["u32",15]],["biguint",3]]],[11,"div","","",7,[[["u64",15]],["biguint",3]]],[11,"div","","",7,[[["u128",15]],["biguint",3]]],[11,"rem","","",4,[[["bigint",3]],["bigint",3]]],[11,"rem","","",4,[[["bigint",3]],["bigint",3]]],[11,"rem","","",4,[[["u8",15]],["bigint",3]]],[11,"rem","","",4,[[["u8",15]],["bigint",3]]],[11,"rem","","",4,[[["u16",15]],["bigint",3]]],[11,"rem","","",4,[[["u16",15]],["bigint",3]]],[11,"rem","","",4,[[["usize",15]],["bigint",3]]],[11,"rem","","",4,[[["usize",15]],["bigint",3]]],[11,"rem","","",4,[[["i8",15]],["bigint",3]]],[11,"rem","","",4,[[["i8",15]],["bigint",3]]],[11,"rem","","",4,[[["i16",15]],["bigint",3]]],[11,"rem","","",4,[[["i16",15]],["bigint",3]]],[11,"rem","","",4,[[["isize",15]],["bigint",3]]],[11,"rem","","",4,[[["isize",15]],["bigint",3]]],[11,"rem","","",4,[[["u32",15]],["bigint",3]]],[11,"rem","","",4,[[["u64",15]],["bigint",3]]],[11,"rem","","",4,[[["u128",15]],["bigint",3]]],[11,"rem","","",4,[[["u32",15]],["bigint",3]]],[11,"rem","","",4,[[["u64",15]],["bigint",3]]],[11,"rem","","",4,[[["u128",15]],["bigint",3]]],[11,"rem","","",4,[[["i32",15]],["bigint",3]]],[11,"rem","","",4,[[["i64",15]],["bigint",3]]],[11,"rem","","",4,[[["i128",15]],["bigint",3]]],[11,"rem","","",4,[[["i32",15]],["bigint",3]]],[11,"rem","","",4,[[["i64",15]],["bigint",3]]],[11,"rem","","",4,[[["i128",15]],["bigint",3]]],[11,"rem","","",7,[[["biguint",3]],["biguint",3]]],[11,"rem","","",7,[[["biguint",3]],["biguint",3]]],[11,"rem","","",7,[[["u8",15]],["biguint",3]]],[11,"rem","","",7,[[["u8",15]],["biguint",3]]],[11,"rem","","",7,[[["u16",15]],["biguint",3]]],[11,"rem","","",7,[[["u16",15]],["biguint",3]]],[11,"rem","","",7,[[["usize",15]],["biguint",3]]],[11,"rem","","",7,[[["usize",15]],["biguint",3]]],[11,"rem","","",7,[[["u32",15]],["biguint",3]]],[11,"rem","","",7,[[["u32",15]],["biguint",3]]],[11,"rem","","",7,[[["u64",15]],["biguint",3]]],[11,"rem","","",7,[[["u128",15]],["biguint",3]]],[11,"rem","","",7,[[["u64",15]],["biguint",3]]],[11,"rem","","",7,[[["u128",15]],["biguint",3]]],[11,"sub","","",4,[[["bigint",3]],["bigint",3]]],[11,"sub","","",4,[[["bigint",3]],["bigint",3]]],[11,"sub","","",4,[[["u8",15]],["bigint",3]]],[11,"sub","","",4,[[["u8",15]],["bigint",3]]],[11,"sub","","",4,[[["u16",15]],["bigint",3]]],[11,"sub","","",4,[[["u16",15]],["bigint",3]]],[11,"sub","","",4,[[["usize",15]],["bigint",3]]],[11,"sub","","",4,[[["usize",15]],["bigint",3]]],[11,"sub","","",4,[[["i8",15]],["bigint",3]]],[11,"sub","","",4,[[["i8",15]],["bigint",3]]],[11,"sub","","",4,[[["i16",15]],["bigint",3]]],[11,"sub","","",4,[[["i16",15]],["bigint",3]]],[11,"sub","","",4,[[["isize",15]],["bigint",3]]],[11,"sub","","",4,[[["isize",15]],["bigint",3]]],[11,"sub","","",4,[[["u32",15]],["bigint",3]]],[11,"sub","","",4,[[["u64",15]],["bigint",3]]],[11,"sub","","",4,[[["u128",15]],["bigint",3]]],[11,"sub","","",4,[[["u32",15]],["bigint",3]]],[11,"sub","","",4,[[["u64",15]],["bigint",3]]],[11,"sub","","",4,[[["u128",15]],["bigint",3]]],[11,"sub","","",4,[[["i32",15]],["bigint",3]]],[11,"sub","","",4,[[["i64",15]],["bigint",3]]],[11,"sub","","",4,[[["i128",15]],["bigint",3]]],[11,"sub","","",4,[[["i32",15]],["bigint",3]]],[11,"sub","","",4,[[["i64",15]],["bigint",3]]],[11,"sub","","",4,[[["i128",15]],["bigint",3]]],[11,"sub","","",7,[[["biguint",3]],["biguint",3]]],[11,"sub","","",7,[[["biguint",3]],["biguint",3]]],[11,"sub","","",7,[[["u8",15]],["biguint",3]]],[11,"sub","","",7,[[["u8",15]],["biguint",3]]],[11,"sub","","",7,[[["u16",15]],["biguint",3]]],[11,"sub","","",7,[[["u16",15]],["biguint",3]]],[11,"sub","","",7,[[["usize",15]],["biguint",3]]],[11,"sub","","",7,[[["usize",15]],["biguint",3]]],[11,"sub","","",7,[[["u32",15]],["biguint",3]]],[11,"sub","","",7,[[["u64",15]],["biguint",3]]],[11,"sub","","",7,[[["u128",15]],["biguint",3]]],[11,"sub","","",7,[[["u32",15]],["biguint",3]]],[11,"sub","","",7,[[["u64",15]],["biguint",3]]],[11,"sub","","",7,[[["u128",15]],["biguint",3]]],[11,"eq","","",2,[[["sign",4]],["bool",15]]],[11,"eq","","",4,[[["bigint",3]],["bool",15]]],[11,"eq","","",7,[[["biguint",3]],["bool",15]]],[11,"eq","","",8,[[["parsebiginterror",3]],["bool",15]]],[11,"ne","","",8,[[["parsebiginterror",3]],["bool",15]]],[11,"eq","","",0,[[["tryfrombiginterror",3]],["bool",15]]],[11,"ne","","",0,[[["tryfrombiginterror",3]],["bool",15]]],[11,"cmp","","",2,[[["sign",4]],["ordering",4]]],[11,"cmp","","",4,[[["bigint",3]],["ordering",4]]],[11,"cmp","","",7,[[["biguint",3]],["ordering",4]]],[11,"partial_cmp","","",2,[[["sign",4]],[["ordering",4],["option",4]]]],[11,"partial_cmp","","",4,[[["bigint",3]],[["ordering",4],["option",4]]]],[11,"partial_cmp","","",7,[[["biguint",3]],[["ordering",4],["option",4]]]],[11,"add","","",4,[[["bigint",3]],["bigint",3]]],[11,"add","","",4,[[["bigint",3]],["bigint",3]]],[11,"add","","",4,[[["u8",15]],["bigint",3]]],[11,"add","","",4,[[["u8",15]],["bigint",3]]],[11,"add","","",4,[[["u16",15]],["bigint",3]]],[11,"add","","",4,[[["u16",15]],["bigint",3]]],[11,"add","","",4,[[["usize",15]],["bigint",3]]],[11,"add","","",4,[[["usize",15]],["bigint",3]]],[11,"add","","",4,[[["i8",15]],["bigint",3]]],[11,"add","","",4,[[["i8",15]],["bigint",3]]],[11,"add","","",4,[[["i16",15]],["bigint",3]]],[11,"add","","",4,[[["i16",15]],["bigint",3]]],[11,"add","","",4,[[["isize",15]],["bigint",3]]],[11,"add","","",4,[[["isize",15]],["bigint",3]]],[11,"add","","",4,[[["u32",15]],["bigint",3]]],[11,"add","","",4,[[["u64",15]],["bigint",3]]],[11,"add","","",4,[[["u128",15]],["bigint",3]]],[11,"add","","",4,[[["u32",15]],["bigint",3]]],[11,"add","","",4,[[["u64",15]],["bigint",3]]],[11,"add","","",4,[[["u128",15]],["bigint",3]]],[11,"add","","",4,[[["i32",15]],["bigint",3]]],[11,"add","","",4,[[["i64",15]],["bigint",3]]],[11,"add","","",4,[[["i128",15]],["bigint",3]]],[11,"add","","",4,[[["i32",15]],["bigint",3]]],[11,"add","","",4,[[["i64",15]],["bigint",3]]],[11,"add","","",4,[[["i128",15]],["bigint",3]]],[11,"add","","",7,[[["biguint",3]],["biguint",3]]],[11,"add","","",7,[[["biguint",3]],["biguint",3]]],[11,"add","","",7,[[["u8",15]],["biguint",3]]],[11,"add","","",7,[[["u8",15]],["biguint",3]]],[11,"add","","",7,[[["u16",15]],["biguint",3]]],[11,"add","","",7,[[["u16",15]],["biguint",3]]],[11,"add","","",7,[[["usize",15]],["biguint",3]]],[11,"add","","",7,[[["usize",15]],["biguint",3]]],[11,"add","","",7,[[["u32",15]],["biguint",3]]],[11,"add","","",7,[[["u64",15]],["biguint",3]]],[11,"add","","",7,[[["u128",15]],["biguint",3]]],[11,"add","","",7,[[["u32",15]],["biguint",3]]],[11,"add","","",7,[[["u64",15]],["biguint",3]]],[11,"add","","",7,[[["u128",15]],["biguint",3]]],[11,"mul","","",2,[[["sign",4]],["sign",4]]],[11,"mul","","",4,[[["bigint",3]],["bigint",3]]],[11,"mul","","",4,[[["bigint",3]],["bigint",3]]],[11,"mul","","",4,[[["u8",15]],["bigint",3]]],[11,"mul","","",4,[[["u8",15]],["bigint",3]]],[11,"mul","","",4,[[["u16",15]],["bigint",3]]],[11,"mul","","",4,[[["u16",15]],["bigint",3]]],[11,"mul","","",4,[[["usize",15]],["bigint",3]]],[11,"mul","","",4,[[["usize",15]],["bigint",3]]],[11,"mul","","",4,[[["i8",15]],["bigint",3]]],[11,"mul","","",4,[[["i8",15]],["bigint",3]]],[11,"mul","","",4,[[["i16",15]],["bigint",3]]],[11,"mul","","",4,[[["i16",15]],["bigint",3]]],[11,"mul","","",4,[[["isize",15]],["bigint",3]]],[11,"mul","","",4,[[["isize",15]],["bigint",3]]],[11,"mul","","",4,[[["u32",15]],["bigint",3]]],[11,"mul","","",4,[[["u64",15]],["bigint",3]]],[11,"mul","","",4,[[["u128",15]],["bigint",3]]],[11,"mul","","",4,[[["u32",15]],["bigint",3]]],[11,"mul","","",4,[[["u64",15]],["bigint",3]]],[11,"mul","","",4,[[["u128",15]],["bigint",3]]],[11,"mul","","",4,[[["i32",15]],["bigint",3]]],[11,"mul","","",4,[[["i64",15]],["bigint",3]]],[11,"mul","","",4,[[["i128",15]],["bigint",3]]],[11,"mul","","",4,[[["i32",15]],["bigint",3]]],[11,"mul","","",4,[[["i64",15]],["bigint",3]]],[11,"mul","","",4,[[["i128",15]],["bigint",3]]],[11,"mul","","",7,[[["biguint",3]],["biguint",3]]],[11,"mul","","",7,[[["biguint",3]],["biguint",3]]],[11,"mul","","",7,[[["u8",15]],["biguint",3]]],[11,"mul","","",7,[[["u8",15]],["biguint",3]]],[11,"mul","","",7,[[["u16",15]],["biguint",3]]],[11,"mul","","",7,[[["u16",15]],["biguint",3]]],[11,"mul","","",7,[[["usize",15]],["biguint",3]]],[11,"mul","","",7,[[["usize",15]],["biguint",3]]],[11,"mul","","",7,[[["u32",15]],["biguint",3]]],[11,"mul","","",7,[[["u64",15]],["biguint",3]]],[11,"mul","","",7,[[["u128",15]],["biguint",3]]],[11,"mul","","",7,[[["u32",15]],["biguint",3]]],[11,"mul","","",7,[[["u64",15]],["biguint",3]]],[11,"mul","","",7,[[["u128",15]],["biguint",3]]],[11,"neg","","Negate Sign value.",2,[[],["sign",4]]],[11,"neg","","",4,[[],["bigint",3]]],[11,"add_assign","","",4,[[["bigint",3]]]],[11,"add_assign","","",4,[[["bigint",3]]]],[11,"add_assign","","",4,[[["u8",15]]]],[11,"add_assign","","",4,[[["u16",15]]]],[11,"add_assign","","",4,[[["usize",15]]]],[11,"add_assign","","",4,[[["i8",15]]]],[11,"add_assign","","",4,[[["i16",15]]]],[11,"add_assign","","",4,[[["isize",15]]]],[11,"add_assign","","",4,[[["u32",15]]]],[11,"add_assign","","",4,[[["u64",15]]]],[11,"add_assign","","",4,[[["u128",15]]]],[11,"add_assign","","",4,[[["i32",15]]]],[11,"add_assign","","",4,[[["i64",15]]]],[11,"add_assign","","",4,[[["i128",15]]]],[11,"add_assign","","",7,[[["biguint",3]]]],[11,"add_assign","","",7,[[["biguint",3]]]],[11,"add_assign","","",7,[[["u8",15]]]],[11,"add_assign","","",7,[[["u16",15]]]],[11,"add_assign","","",7,[[["usize",15]]]],[11,"add_assign","","",7,[[["u32",15]]]],[11,"add_assign","","",7,[[["u64",15]]]],[11,"add_assign","","",7,[[["u128",15]]]],[11,"sub_assign","","",4,[[["bigint",3]]]],[11,"sub_assign","","",4,[[["bigint",3]]]],[11,"sub_assign","","",4,[[["u8",15]]]],[11,"sub_assign","","",4,[[["u16",15]]]],[11,"sub_assign","","",4,[[["usize",15]]]],[11,"sub_assign","","",4,[[["i8",15]]]],[11,"sub_assign","","",4,[[["i16",15]]]],[11,"sub_assign","","",4,[[["isize",15]]]],[11,"sub_assign","","",4,[[["u32",15]]]],[11,"sub_assign","","",4,[[["u64",15]]]],[11,"sub_assign","","",4,[[["u128",15]]]],[11,"sub_assign","","",4,[[["i32",15]]]],[11,"sub_assign","","",4,[[["i64",15]]]],[11,"sub_assign","","",4,[[["i128",15]]]],[11,"sub_assign","","",7,[[["biguint",3]]]],[11,"sub_assign","","",7,[[["biguint",3]]]],[11,"sub_assign","","",7,[[["u8",15]]]],[11,"sub_assign","","",7,[[["u16",15]]]],[11,"sub_assign","","",7,[[["usize",15]]]],[11,"sub_assign","","",7,[[["u32",15]]]],[11,"sub_assign","","",7,[[["u64",15]]]],[11,"sub_assign","","",7,[[["u128",15]]]],[11,"mul_assign","","",4,[[["bigint",3]]]],[11,"mul_assign","","",4,[[["bigint",3]]]],[11,"mul_assign","","",4,[[["u8",15]]]],[11,"mul_assign","","",4,[[["u16",15]]]],[11,"mul_assign","","",4,[[["usize",15]]]],[11,"mul_assign","","",4,[[["i8",15]]]],[11,"mul_assign","","",4,[[["i16",15]]]],[11,"mul_assign","","",4,[[["isize",15]]]],[11,"mul_assign","","",4,[[["u32",15]]]],[11,"mul_assign","","",4,[[["u64",15]]]],[11,"mul_assign","","",4,[[["u128",15]]]],[11,"mul_assign","","",4,[[["i32",15]]]],[11,"mul_assign","","",4,[[["i64",15]]]],[11,"mul_assign","","",4,[[["i128",15]]]],[11,"mul_assign","","",7,[[["biguint",3]]]],[11,"mul_assign","","",7,[[["biguint",3]]]],[11,"mul_assign","","",7,[[["u8",15]]]],[11,"mul_assign","","",7,[[["u16",15]]]],[11,"mul_assign","","",7,[[["usize",15]]]],[11,"mul_assign","","",7,[[["u32",15]]]],[11,"mul_assign","","",7,[[["u64",15]]]],[11,"mul_assign","","",7,[[["u128",15]]]],[11,"div_assign","","",4,[[["bigint",3]]]],[11,"div_assign","","",4,[[["bigint",3]]]],[11,"div_assign","","",4,[[["u8",15]]]],[11,"div_assign","","",4,[[["u16",15]]]],[11,"div_assign","","",4,[[["usize",15]]]],[11,"div_assign","","",4,[[["i8",15]]]],[11,"div_assign","","",4,[[["i16",15]]]],[11,"div_assign","","",4,[[["isize",15]]]],[11,"div_assign","","",4,[[["u32",15]]]],[11,"div_assign","","",4,[[["u64",15]]]],[11,"div_assign","","",4,[[["u128",15]]]],[11,"div_assign","","",4,[[["i32",15]]]],[11,"div_assign","","",4,[[["i64",15]]]],[11,"div_assign","","",4,[[["i128",15]]]],[11,"div_assign","","",7,[[["biguint",3]]]],[11,"div_assign","","",7,[[["biguint",3]]]],[11,"div_assign","","",7,[[["u8",15]]]],[11,"div_assign","","",7,[[["u16",15]]]],[11,"div_assign","","",7,[[["usize",15]]]],[11,"div_assign","","",7,[[["u32",15]]]],[11,"div_assign","","",7,[[["u64",15]]]],[11,"div_assign","","",7,[[["u128",15]]]],[11,"rem_assign","","",4,[[["bigint",3]]]],[11,"rem_assign","","",4,[[["bigint",3]]]],[11,"rem_assign","","",4,[[["u8",15]]]],[11,"rem_assign","","",4,[[["u16",15]]]],[11,"rem_assign","","",4,[[["usize",15]]]],[11,"rem_assign","","",4,[[["i8",15]]]],[11,"rem_assign","","",4,[[["i16",15]]]],[11,"rem_assign","","",4,[[["isize",15]]]],[11,"rem_assign","","",4,[[["u32",15]]]],[11,"rem_assign","","",4,[[["u64",15]]]],[11,"rem_assign","","",4,[[["u128",15]]]],[11,"rem_assign","","",4,[[["i32",15]]]],[11,"rem_assign","","",4,[[["i64",15]]]],[11,"rem_assign","","",4,[[["i128",15]]]],[11,"rem_assign","","",7,[[["biguint",3]]]],[11,"rem_assign","","",7,[[["biguint",3]]]],[11,"rem_assign","","",7,[[["u8",15]]]],[11,"rem_assign","","",7,[[["u16",15]]]],[11,"rem_assign","","",7,[[["usize",15]]]],[11,"rem_assign","","",7,[[["u32",15]]]],[11,"rem_assign","","",7,[[["u64",15]]]],[11,"rem_assign","","",7,[[["u128",15]]]],[11,"not","","",4,[[],["bigint",3]]],[11,"bitand","","",4,[[["bigint",3]],["bigint",3]]],[11,"bitand","","",4,[[["bigint",3]],["bigint",3]]],[11,"bitand","","",7,[[["biguint",3]],["biguint",3]]],[11,"bitand","","",7,[[["biguint",3]],["biguint",3]]],[11,"bitor","","",4,[[["bigint",3]],["bigint",3]]],[11,"bitor","","",4,[[["bigint",3]],["bigint",3]]],[11,"bitor","","",7,[[["biguint",3]],["biguint",3]]],[11,"bitor","","",7,[[["biguint",3]],["biguint",3]]],[11,"bitxor","","",4,[[["bigint",3]],["bigint",3]]],[11,"bitxor","","",4,[[["bigint",3]],["bigint",3]]],[11,"bitxor","","",7,[[["biguint",3]],["biguint",3]]],[11,"bitxor","","",7,[[["biguint",3]],["biguint",3]]],[11,"shl","","",4,[[["u8",15]],["bigint",3]]],[11,"shl","","",4,[[["u8",15]],["bigint",3]]],[11,"shl","","",4,[[["u16",15]],["bigint",3]]],[11,"shl","","",4,[[["u16",15]],["bigint",3]]],[11,"shl","","",4,[[["u32",15]],["bigint",3]]],[11,"shl","","",4,[[["u32",15]],["bigint",3]]],[11,"shl","","",4,[[["u64",15]],["bigint",3]]],[11,"shl","","",4,[[["u64",15]],["bigint",3]]],[11,"shl","","",4,[[["u128",15]],["bigint",3]]],[11,"shl","","",4,[[["u128",15]],["bigint",3]]],[11,"shl","","",4,[[["usize",15]],["bigint",3]]],[11,"shl","","",4,[[["usize",15]],["bigint",3]]],[11,"shl","","",4,[[["i8",15]],["bigint",3]]],[11,"shl","","",4,[[["i8",15]],["bigint",3]]],[11,"shl","","",4,[[["i16",15]],["bigint",3]]],[11,"shl","","",4,[[["i16",15]],["bigint",3]]],[11,"shl","","",4,[[["i32",15]],["bigint",3]]],[11,"shl","","",4,[[["i32",15]],["bigint",3]]],[11,"shl","","",4,[[["i64",15]],["bigint",3]]],[11,"shl","","",4,[[["i64",15]],["bigint",3]]],[11,"shl","","",4,[[["i128",15]],["bigint",3]]],[11,"shl","","",4,[[["i128",15]],["bigint",3]]],[11,"shl","","",4,[[["isize",15]],["bigint",3]]],[11,"shl","","",4,[[["isize",15]],["bigint",3]]],[11,"shl","","",7,[[["u8",15]],["biguint",3]]],[11,"shl","","",7,[[["u8",15]],["biguint",3]]],[11,"shl","","",7,[[["u16",15]],["biguint",3]]],[11,"shl","","",7,[[["u16",15]],["biguint",3]]],[11,"shl","","",7,[[["u32",15]],["biguint",3]]],[11,"shl","","",7,[[["u32",15]],["biguint",3]]],[11,"shl","","",7,[[["u64",15]],["biguint",3]]],[11,"shl","","",7,[[["u64",15]],["biguint",3]]],[11,"shl","","",7,[[["u128",15]],["biguint",3]]],[11,"shl","","",7,[[["u128",15]],["biguint",3]]],[11,"shl","","",7,[[["usize",15]],["biguint",3]]],[11,"shl","","",7,[[["usize",15]],["biguint",3]]],[11,"shl","","",7,[[["i8",15]],["biguint",3]]],[11,"shl","","",7,[[["i8",15]],["biguint",3]]],[11,"shl","","",7,[[["i16",15]],["biguint",3]]],[11,"shl","","",7,[[["i16",15]],["biguint",3]]],[11,"shl","","",7,[[["i32",15]],["biguint",3]]],[11,"shl","","",7,[[["i32",15]],["biguint",3]]],[11,"shl","","",7,[[["i64",15]],["biguint",3]]],[11,"shl","","",7,[[["i64",15]],["biguint",3]]],[11,"shl","","",7,[[["i128",15]],["biguint",3]]],[11,"shl","","",7,[[["i128",15]],["biguint",3]]],[11,"shl","","",7,[[["isize",15]],["biguint",3]]],[11,"shl","","",7,[[["isize",15]],["biguint",3]]],[11,"shr","","",4,[[["u8",15]],["bigint",3]]],[11,"shr","","",4,[[["u8",15]],["bigint",3]]],[11,"shr","","",4,[[["u16",15]],["bigint",3]]],[11,"shr","","",4,[[["u16",15]],["bigint",3]]],[11,"shr","","",4,[[["u32",15]],["bigint",3]]],[11,"shr","","",4,[[["u32",15]],["bigint",3]]],[11,"shr","","",4,[[["u64",15]],["bigint",3]]],[11,"shr","","",4,[[["u64",15]],["bigint",3]]],[11,"shr","","",4,[[["u128",15]],["bigint",3]]],[11,"shr","","",4,[[["u128",15]],["bigint",3]]],[11,"shr","","",4,[[["usize",15]],["bigint",3]]],[11,"shr","","",4,[[["usize",15]],["bigint",3]]],[11,"shr","","",4,[[["i8",15]],["bigint",3]]],[11,"shr","","",4,[[["i8",15]],["bigint",3]]],[11,"shr","","",4,[[["i16",15]],["bigint",3]]],[11,"shr","","",4,[[["i16",15]],["bigint",3]]],[11,"shr","","",4,[[["i32",15]],["bigint",3]]],[11,"shr","","",4,[[["i32",15]],["bigint",3]]],[11,"shr","","",4,[[["i64",15]],["bigint",3]]],[11,"shr","","",4,[[["i64",15]],["bigint",3]]],[11,"shr","","",4,[[["i128",15]],["bigint",3]]],[11,"shr","","",4,[[["i128",15]],["bigint",3]]],[11,"shr","","",4,[[["isize",15]],["bigint",3]]],[11,"shr","","",4,[[["isize",15]],["bigint",3]]],[11,"shr","","",7,[[["u8",15]],["biguint",3]]],[11,"shr","","",7,[[["u8",15]],["biguint",3]]],[11,"shr","","",7,[[["u16",15]],["biguint",3]]],[11,"shr","","",7,[[["u16",15]],["biguint",3]]],[11,"shr","","",7,[[["u32",15]],["biguint",3]]],[11,"shr","","",7,[[["u32",15]],["biguint",3]]],[11,"shr","","",7,[[["u64",15]],["biguint",3]]],[11,"shr","","",7,[[["u64",15]],["biguint",3]]],[11,"shr","","",7,[[["u128",15]],["biguint",3]]],[11,"shr","","",7,[[["u128",15]],["biguint",3]]],[11,"shr","","",7,[[["usize",15]],["biguint",3]]],[11,"shr","","",7,[[["usize",15]],["biguint",3]]],[11,"shr","","",7,[[["i8",15]],["biguint",3]]],[11,"shr","","",7,[[["i8",15]],["biguint",3]]],[11,"shr","","",7,[[["i16",15]],["biguint",3]]],[11,"shr","","",7,[[["i16",15]],["biguint",3]]],[11,"shr","","",7,[[["i32",15]],["biguint",3]]],[11,"shr","","",7,[[["i32",15]],["biguint",3]]],[11,"shr","","",7,[[["i64",15]],["biguint",3]]],[11,"shr","","",7,[[["i64",15]],["biguint",3]]],[11,"shr","","",7,[[["i128",15]],["biguint",3]]],[11,"shr","","",7,[[["i128",15]],["biguint",3]]],[11,"shr","","",7,[[["isize",15]],["biguint",3]]],[11,"shr","","",7,[[["isize",15]],["biguint",3]]],[11,"bitand_assign","","",4,[[["bigint",3]]]],[11,"bitand_assign","","",4,[[["bigint",3]]]],[11,"bitand_assign","","",7,[[["biguint",3]]]],[11,"bitand_assign","","",7,[[["biguint",3]]]],[11,"bitor_assign","","",4,[[["bigint",3]]]],[11,"bitor_assign","","",4,[[["bigint",3]]]],[11,"bitor_assign","","",7,[[["biguint",3]]]],[11,"bitor_assign","","",7,[[["biguint",3]]]],[11,"bitxor_assign","","",4,[[["bigint",3]]]],[11,"bitxor_assign","","",4,[[["bigint",3]]]],[11,"bitxor_assign","","",7,[[["biguint",3]]]],[11,"bitxor_assign","","",7,[[["biguint",3]]]],[11,"shl_assign","","",4,[[["u8",15]]]],[11,"shl_assign","","",4,[[["u8",15]]]],[11,"shl_assign","","",4,[[["u16",15]]]],[11,"shl_assign","","",4,[[["u16",15]]]],[11,"shl_assign","","",4,[[["u32",15]]]],[11,"shl_assign","","",4,[[["u32",15]]]],[11,"shl_assign","","",4,[[["u64",15]]]],[11,"shl_assign","","",4,[[["u64",15]]]],[11,"shl_assign","","",4,[[["u128",15]]]],[11,"shl_assign","","",4,[[["u128",15]]]],[11,"shl_assign","","",4,[[["usize",15]]]],[11,"shl_assign","","",4,[[["usize",15]]]],[11,"shl_assign","","",4,[[["i8",15]]]],[11,"shl_assign","","",4,[[["i8",15]]]],[11,"shl_assign","","",4,[[["i16",15]]]],[11,"shl_assign","","",4,[[["i16",15]]]],[11,"shl_assign","","",4,[[["i32",15]]]],[11,"shl_assign","","",4,[[["i32",15]]]],[11,"shl_assign","","",4,[[["i64",15]]]],[11,"shl_assign","","",4,[[["i64",15]]]],[11,"shl_assign","","",4,[[["i128",15]]]],[11,"shl_assign","","",4,[[["i128",15]]]],[11,"shl_assign","","",4,[[["isize",15]]]],[11,"shl_assign","","",4,[[["isize",15]]]],[11,"shl_assign","","",7,[[["u8",15]]]],[11,"shl_assign","","",7,[[["u8",15]]]],[11,"shl_assign","","",7,[[["u16",15]]]],[11,"shl_assign","","",7,[[["u16",15]]]],[11,"shl_assign","","",7,[[["u32",15]]]],[11,"shl_assign","","",7,[[["u32",15]]]],[11,"shl_assign","","",7,[[["u64",15]]]],[11,"shl_assign","","",7,[[["u64",15]]]],[11,"shl_assign","","",7,[[["u128",15]]]],[11,"shl_assign","","",7,[[["u128",15]]]],[11,"shl_assign","","",7,[[["usize",15]]]],[11,"shl_assign","","",7,[[["usize",15]]]],[11,"shl_assign","","",7,[[["i8",15]]]],[11,"shl_assign","","",7,[[["i8",15]]]],[11,"shl_assign","","",7,[[["i16",15]]]],[11,"shl_assign","","",7,[[["i16",15]]]],[11,"shl_assign","","",7,[[["i32",15]]]],[11,"shl_assign","","",7,[[["i32",15]]]],[11,"shl_assign","","",7,[[["i64",15]]]],[11,"shl_assign","","",7,[[["i64",15]]]],[11,"shl_assign","","",7,[[["i128",15]]]],[11,"shl_assign","","",7,[[["i128",15]]]],[11,"shl_assign","","",7,[[["isize",15]]]],[11,"shl_assign","","",7,[[["isize",15]]]],[11,"shr_assign","","",4,[[["u8",15]]]],[11,"shr_assign","","",4,[[["u8",15]]]],[11,"shr_assign","","",4,[[["u16",15]]]],[11,"shr_assign","","",4,[[["u16",15]]]],[11,"shr_assign","","",4,[[["u32",15]]]],[11,"shr_assign","","",4,[[["u32",15]]]],[11,"shr_assign","","",4,[[["u64",15]]]],[11,"shr_assign","","",4,[[["u64",15]]]],[11,"shr_assign","","",4,[[["u128",15]]]],[11,"shr_assign","","",4,[[["u128",15]]]],[11,"shr_assign","","",4,[[["usize",15]]]],[11,"shr_assign","","",4,[[["usize",15]]]],[11,"shr_assign","","",4,[[["i8",15]]]],[11,"shr_assign","","",4,[[["i8",15]]]],[11,"shr_assign","","",4,[[["i16",15]]]],[11,"shr_assign","","",4,[[["i16",15]]]],[11,"shr_assign","","",4,[[["i32",15]]]],[11,"shr_assign","","",4,[[["i32",15]]]],[11,"shr_assign","","",4,[[["i64",15]]]],[11,"shr_assign","","",4,[[["i64",15]]]],[11,"shr_assign","","",4,[[["i128",15]]]],[11,"shr_assign","","",4,[[["i128",15]]]],[11,"shr_assign","","",4,[[["isize",15]]]],[11,"shr_assign","","",4,[[["isize",15]]]],[11,"shr_assign","","",7,[[["u8",15]]]],[11,"shr_assign","","",7,[[["u8",15]]]],[11,"shr_assign","","",7,[[["u16",15]]]],[11,"shr_assign","","",7,[[["u16",15]]]],[11,"shr_assign","","",7,[[["u32",15]]]],[11,"shr_assign","","",7,[[["u32",15]]]],[11,"shr_assign","","",7,[[["u64",15]]]],[11,"shr_assign","","",7,[[["u64",15]]]],[11,"shr_assign","","",7,[[["u128",15]]]],[11,"shr_assign","","",7,[[["u128",15]]]],[11,"shr_assign","","",7,[[["usize",15]]]],[11,"shr_assign","","",7,[[["usize",15]]]],[11,"shr_assign","","",7,[[["i8",15]]]],[11,"shr_assign","","",7,[[["i8",15]]]],[11,"shr_assign","","",7,[[["i16",15]]]],[11,"shr_assign","","",7,[[["i16",15]]]],[11,"shr_assign","","",7,[[["i32",15]]]],[11,"shr_assign","","",7,[[["i32",15]]]],[11,"shr_assign","","",7,[[["i64",15]]]],[11,"shr_assign","","",7,[[["i64",15]]]],[11,"shr_assign","","",7,[[["i128",15]]]],[11,"shr_assign","","",7,[[["i128",15]]]],[11,"shr_assign","","",7,[[["isize",15]]]],[11,"shr_assign","","",7,[[["isize",15]]]],[11,"hash","","",2,[[]]],[11,"hash","","",4,[[]]],[11,"hash","","",7,[[]]],[11,"len","","",5,[[],["usize",15]]],[11,"len","","",6,[[],["usize",15]]],[11,"try_from","","",7,[[["bigint",3]],[["biguint",3],["tryfrombiginterror",3],["result",4]]]],[11,"try_from","","",7,[[["bigint",3]],[["result",4],["biguint",3],["tryfrombiginterror",3]]]],[11,"try_from","","",7,[[["i8",15]],[["biguint",3],["tryfrombiginterror",3],["result",4]]]],[11,"try_from","","",7,[[["i16",15]],[["biguint",3],["tryfrombiginterror",3],["result",4]]]],[11,"try_from","","",7,[[["i32",15]],[["biguint",3],["tryfrombiginterror",3],["result",4]]]],[11,"try_from","","",7,[[["i64",15]],[["biguint",3],["tryfrombiginterror",3],["result",4]]]],[11,"try_from","","",7,[[["isize",15]],[["biguint",3],["tryfrombiginterror",3],["result",4]]]],[11,"try_from","","",7,[[["i128",15]],[["biguint",3],["tryfrombiginterror",3],["result",4]]]],[11,"from_str","","",4,[[["str",15]],[["result",4],["parsebiginterror",3],["bigint",3]]]],[11,"from_str","","",7,[[["str",15]],[["biguint",3],["parsebiginterror",3],["result",4]]]],[11,"fmt","","",4,[[["formatter",3]],["result",6]]],[11,"fmt","","",7,[[["formatter",3]],["result",6]]],[11,"fmt","","",4,[[["formatter",3]],["result",6]]],[11,"fmt","","",7,[[["formatter",3]],["result",6]]],[11,"fmt","","",4,[[["formatter",3]],["result",6]]],[11,"fmt","","",7,[[["formatter",3]],["result",6]]],[11,"fmt","","",4,[[["formatter",3]],["result",6]]],[11,"fmt","","",7,[[["formatter",3]],["result",6]]],[11,"next","","",5,[[],[["option",4],["u32",15]]]],[11,"size_hint","","",5,[[]]],[11,"last","","",5,[[],[["option",4],["u32",15]]]],[11,"count","","",5,[[],["usize",15]]],[11,"next","","",6,[[],[["u64",15],["option",4]]]],[11,"size_hint","","",6,[[]]],[11,"nth","","",6,[[["usize",15]],[["u64",15],["option",4]]]],[11,"last","","",6,[[],[["u64",15],["option",4]]]],[11,"count","","",6,[[],["usize",15]]],[11,"sum","","",4,[[]]],[11,"sum","","",7,[[]]],[11,"product","","",4,[[]]],[11,"product","","",7,[[]]],[11,"clone","","",2,[[],["sign",4]]],[11,"clone","","",4,[[]]],[11,"clone_from","","",4,[[]]],[11,"clone","","",7,[[]]],[11,"clone_from","","",7,[[]]],[11,"clone","","",8,[[],["parsebiginterror",3]]],[11,"clone","","",0,[[],["tryfrombiginterror",3]]],[11,"default","","",4,[[],["bigint",3]]],[11,"default","","",7,[[],["biguint",3]]],[11,"description","","",8,[[],["str",15]]],[11,"description","","",0,[[],["str",15]]],[11,"nth_root","","",4,[[["u32",15]]]],[11,"sqrt","","",4,[[]]],[11,"cbrt","","",4,[[]]],[11,"nth_root","","",7,[[["u32",15]]]],[11,"sqrt","","",7,[[]]],[11,"cbrt","","",7,[[]]],[11,"div_rem","","",4,[[["bigint",3]]]],[11,"div_floor","","",4,[[["bigint",3]],["bigint",3]]],[11,"mod_floor","","",4,[[["bigint",3]],["bigint",3]]],[11,"div_mod_floor","","",4,[[["bigint",3]]]],[11,"div_ceil","","",4,[[]]],[11,"gcd","","Calculates the Greatest Common Divisor (GCD) of the …",4,[[["bigint",3]],["bigint",3]]],[11,"lcm","","Calculates the Lowest Common Multiple (LCM) of the number …",4,[[["bigint",3]],["bigint",3]]],[11,"gcd_lcm","","Calculates the Greatest Common Divisor (GCD) and Lowest …",4,[[["bigint",3]]]],[11,"extended_gcd_lcm","","Greatest common divisor, least common multiple, and …",4,[[["bigint",3]]]],[11,"divides","","Deprecated, use <code>is_multiple_of</code> instead.",4,[[["bigint",3]],["bool",15]]],[11,"is_multiple_of","","Returns <code>true</code> if the number is a multiple of <code>other</code>.",4,[[["bigint",3]],["bool",15]]],[11,"is_even","","Returns <code>true</code> if the number is divisible by <code>2</code>.",4,[[],["bool",15]]],[11,"is_odd","","Returns <code>true</code> if the number is not divisible by <code>2</code>.",4,[[],["bool",15]]],[11,"next_multiple_of","","Rounds up to nearest multiple of argument.",4,[[]]],[11,"prev_multiple_of","","Rounds down to nearest multiple of argument.",4,[[]]],[11,"div_rem","","",7,[[["biguint",3]]]],[11,"div_floor","","",7,[[["biguint",3]],["biguint",3]]],[11,"mod_floor","","",7,[[["biguint",3]],["biguint",3]]],[11,"div_mod_floor","","",7,[[["biguint",3]]]],[11,"div_ceil","","",7,[[["biguint",3]],["biguint",3]]],[11,"gcd","","Calculates the Greatest Common Divisor (GCD) of the …",7,[[]]],[11,"lcm","","Calculates the Lowest Common Multiple (LCM) of the number …",7,[[["biguint",3]],["biguint",3]]],[11,"gcd_lcm","","Calculates the Greatest Common Divisor (GCD) and Lowest …",7,[[]]],[11,"divides","","Deprecated, use <code>is_multiple_of</code> instead.",7,[[["biguint",3]],["bool",15]]],[11,"is_multiple_of","","Returns <code>true</code> if the number is a multiple of <code>other</code>.",7,[[["biguint",3]],["bool",15]]],[11,"is_even","","Returns <code>true</code> if the number is divisible by <code>2</code>.",7,[[],["bool",15]]],[11,"is_odd","","Returns <code>true</code> if the number is not divisible by <code>2</code>.",7,[[],["bool",15]]],[11,"next_multiple_of","","Rounds up to nearest multiple of argument.",7,[[]]],[11,"prev_multiple_of","","Rounds down to nearest multiple of argument.",7,[[]]],[11,"to_i64","","",4,[[],[["i64",15],["option",4]]]],[11,"to_i128","","",4,[[],[["option",4],["i128",15]]]],[11,"to_u64","","",4,[[],[["u64",15],["option",4]]]],[11,"to_u128","","",4,[[],[["u128",15],["option",4]]]],[11,"to_f32","","",4,[[],[["option",4],["f32",15]]]],[11,"to_f64","","",4,[[],[["f64",15],["option",4]]]],[11,"to_i64","","",7,[[],[["i64",15],["option",4]]]],[11,"to_i128","","",7,[[],[["option",4],["i128",15]]]],[11,"to_u64","","",7,[[],[["u64",15],["option",4]]]],[11,"to_u128","","",7,[[],[["u128",15],["option",4]]]],[11,"to_f32","","",7,[[],[["option",4],["f32",15]]]],[11,"to_f64","","",7,[[],[["f64",15],["option",4]]]],[11,"from_i64","","",4,[[["i64",15]],[["option",4],["bigint",3]]]],[11,"from_i128","","",4,[[["i128",15]],[["option",4],["bigint",3]]]],[11,"from_u64","","",4,[[["u64",15]],[["option",4],["bigint",3]]]],[11,"from_u128","","",4,[[["u128",15]],[["option",4],["bigint",3]]]],[11,"from_f64","","",4,[[["f64",15]],[["option",4],["bigint",3]]]],[11,"from_i64","","",7,[[["i64",15]],[["option",4],["biguint",3]]]],[11,"from_i128","","",7,[[["i128",15]],[["option",4],["biguint",3]]]],[11,"from_u64","","",7,[[["u64",15]],[["option",4],["biguint",3]]]],[11,"from_u128","","",7,[[["u128",15]],[["option",4],["biguint",3]]]],[11,"from_f64","","",7,[[["f64",15]],[["option",4],["biguint",3]]]],[11,"from_str_radix","","Creates and initializes a BigInt.",4,[[["u32",15],["str",15]],[["result",4],["parsebiginterror",3],["bigint",3]]]],[11,"from_str_radix","","Creates and initializes a <code>BigUint</code>.",7,[[["u32",15],["str",15]],[["biguint",3],["parsebiginterror",3],["result",4]]]],[11,"zero","","",4,[[],["bigint",3]]],[11,"set_zero","","",4,[[]]],[11,"is_zero","","",4,[[],["bool",15]]],[11,"zero","","",7,[[],["biguint",3]]],[11,"set_zero","","",7,[[]]],[11,"is_zero","","",7,[[],["bool",15]]],[11,"one","","",4,[[],["bigint",3]]],[11,"set_one","","",4,[[]]],[11,"is_one","","",4,[[],["bool",15]]],[11,"one","","",7,[[],["biguint",3]]],[11,"set_one","","",7,[[]]],[11,"is_one","","",7,[[],["bool",15]]],[11,"checked_add","","",4,[[["bigint",3]],[["option",4],["bigint",3]]]],[11,"checked_add","","",7,[[["biguint",3]],[["option",4],["biguint",3]]]],[11,"checked_sub","","",4,[[["bigint",3]],[["option",4],["bigint",3]]]],[11,"checked_sub","","",7,[[["biguint",3]],[["option",4],["biguint",3]]]],[11,"checked_mul","","",4,[[["bigint",3]],[["option",4],["bigint",3]]]],[11,"checked_mul","","",7,[[["biguint",3]],[["option",4],["biguint",3]]]],[11,"checked_div","","",4,[[["bigint",3]],[["option",4],["bigint",3]]]],[11,"checked_div","","",7,[[["biguint",3]],[["option",4],["biguint",3]]]],[11,"pow","","",4,[[["u8",15]],["bigint",3]]],[11,"pow","","",4,[[["u8",15]],["bigint",3]]],[11,"pow","","",4,[[["u16",15]],["bigint",3]]],[11,"pow","","",4,[[["u16",15]],["bigint",3]]],[11,"pow","","",4,[[["u32",15]],["bigint",3]]],[11,"pow","","",4,[[["u32",15]],["bigint",3]]],[11,"pow","","",4,[[["u64",15]],["bigint",3]]],[11,"pow","","",4,[[["u64",15]],["bigint",3]]],[11,"pow","","",4,[[["usize",15]],["bigint",3]]],[11,"pow","","",4,[[["usize",15]],["bigint",3]]],[11,"pow","","",4,[[["u128",15]],["bigint",3]]],[11,"pow","","",4,[[["u128",15]],["bigint",3]]],[11,"pow","","",4,[[["biguint",3]],["bigint",3]]],[11,"pow","","",4,[[["biguint",3]],["bigint",3]]],[11,"pow","","",7,[[["biguint",3]],["biguint",3]]],[11,"pow","","",7,[[["biguint",3]],["biguint",3]]],[11,"pow","","",7,[[["u8",15]],["biguint",3]]],[11,"pow","","",7,[[["u8",15]],["biguint",3]]],[11,"pow","","",7,[[["u16",15]],["biguint",3]]],[11,"pow","","",7,[[["u16",15]],["biguint",3]]],[11,"pow","","",7,[[["u32",15]],["biguint",3]]],[11,"pow","","",7,[[["u32",15]],["biguint",3]]],[11,"pow","","",7,[[["u64",15]],["biguint",3]]],[11,"pow","","",7,[[["u64",15]],["biguint",3]]],[11,"pow","","",7,[[["usize",15]],["biguint",3]]],[11,"pow","","",7,[[["usize",15]],["biguint",3]]],[11,"pow","","",7,[[["u128",15]],["biguint",3]]],[11,"pow","","",7,[[["u128",15]],["biguint",3]]],[11,"abs","","",4,[[],["bigint",3]]],[11,"abs_sub","","",4,[[["bigint",3]],["bigint",3]]],[11,"signum","","",4,[[],["bigint",3]]],[11,"is_positive","","",4,[[],["bool",15]]],[11,"is_negative","","",4,[[],["bool",15]]],[11,"new","","Creates and initializes a BigInt.",4,[[["vec",3],["u32",15],["sign",4]],["bigint",3]]],[11,"from_biguint","","Creates and initializes a <code>BigInt</code>.",4,[[["biguint",3],["sign",4]],["bigint",3]]],[11,"from_slice","","Creates and initializes a <code>BigInt</code>.",4,[[["sign",4]],["bigint",3]]],[11,"assign_from_slice","","Reinitializes a <code>BigInt</code>.",4,[[["sign",4]]]],[11,"from_bytes_be","","Creates and initializes a <code>BigInt</code>.",4,[[["sign",4]],["bigint",3]]],[11,"from_bytes_le","","Creates and initializes a <code>BigInt</code>.",4,[[["sign",4]],["bigint",3]]],[11,"from_signed_bytes_be","","Creates and initializes a <code>BigInt</code> from an array of bytes in…",4,[[],["bigint",3]]],[11,"from_signed_bytes_le","","Creates and initializes a <code>BigInt</code> from an array of bytes …",4,[[],["bigint",3]]],[11,"parse_bytes","","Creates and initializes a <code>BigInt</code>.",4,[[["u32",15]],[["option",4],["bigint",3]]]],[11,"from_radix_be","","Creates and initializes a <code>BigInt</code>. Each u8 of the input …",4,[[["u32",15],["sign",4]],[["option",4],["bigint",3]]]],[11,"from_radix_le","","Creates and initializes a <code>BigInt</code>. Each u8 of the input …",4,[[["u32",15],["sign",4]],[["option",4],["bigint",3]]]],[11,"to_bytes_be","","Returns the sign and the byte representation of the <code>BigInt</code>…",4,[[]]],[11,"to_bytes_le","","Returns the sign and the byte representation of the <code>BigInt</code>…",4,[[]]],[11,"to_u32_digits","","Returns the sign and the <code>u32</code> digits representation of the …",4,[[]]],[11,"to_u64_digits","","Returns the sign and the <code>u64</code> digits representation of the …",4,[[]]],[11,"iter_u32_digits","","Returns an iterator of <code>u32</code> digits representation of the …",4,[[],["u32digits",3]]],[11,"iter_u64_digits","","Returns an iterator of <code>u64</code> digits representation of the …",4,[[],["u64digits",3]]],[11,"to_signed_bytes_be","","Returns the two\'s-complement byte representation of the …",4,[[],[["vec",3],["u8",15]]]],[11,"to_signed_bytes_le","","Returns the two\'s-complement byte representation of the …",4,[[],[["vec",3],["u8",15]]]],[11,"to_str_radix","","Returns the integer formatted as a string in the given …",4,[[["u32",15]],["string",3]]],[11,"to_radix_be","","Returns the integer in the requested base in big-endian …",4,[[["u32",15]]]],[11,"to_radix_le","","Returns the integer in the requested base in …",4,[[["u32",15]]]],[11,"sign","","Returns the sign of the <code>BigInt</code> as a <code>Sign</code>.",4,[[],["sign",4]]],[11,"magnitude","","Returns the magnitude of the <code>BigInt</code> as a <code>BigUint</code>.",4,[[],["biguint",3]]],[11,"into_parts","","Convert this <code>BigInt</code> into its <code>Sign</code> and <code>BigUint</code> magnitude, …",4,[[]]],[11,"bits","","Determines the fewest bits necessary to express the <code>BigInt</code>…",4,[[],["u64",15]]],[11,"to_biguint","","Converts this <code>BigInt</code> into a <code>BigUint</code>, if it\'s not negative.",4,[[],[["option",4],["biguint",3]]]],[11,"checked_add","","",4,[[["bigint",3]],[["option",4],["bigint",3]]]],[11,"checked_sub","","",4,[[["bigint",3]],[["option",4],["bigint",3]]]],[11,"checked_mul","","",4,[[["bigint",3]],[["option",4],["bigint",3]]]],[11,"checked_div","","",4,[[["bigint",3]],[["option",4],["bigint",3]]]],[11,"pow","","Returns <code>self ^ exponent</code>.",4,[[["u32",15]]]],[11,"modpow","","Returns <code>(self ^ exponent) mod modulus</code>",4,[[]]],[11,"sqrt","","Returns the truncated principal square root of <code>self</code> -- …",4,[[]]],[11,"cbrt","","Returns the truncated principal cube root of <code>self</code> -- see …",4,[[]]],[11,"nth_root","","Returns the truncated principal <code>n</code>th root of <code>self</code> -- See …",4,[[["u32",15]]]],[11,"trailing_zeros","","Returns the number of least-significant bits that are …",4,[[],[["u64",15],["option",4]]]],[11,"bit","","Returns whether the bit in position <code>bit</code> is set, using the …",4,[[["u64",15]],["bool",15]]],[11,"set_bit","","Sets or clears the bit in the given position, using the …",4,[[["bool",15],["u64",15]]]],[11,"new","","Creates and initializes a <code>BigUint</code>.",7,[[["vec",3],["u32",15]],["biguint",3]]],[11,"from_slice","","Creates and initializes a <code>BigUint</code>.",7,[[],["biguint",3]]],[11,"assign_from_slice","","Assign a value to a <code>BigUint</code>.",7,[[]]],[11,"from_bytes_be","","Creates and initializes a <code>BigUint</code>.",7,[[],["biguint",3]]],[11,"from_bytes_le","","Creates and initializes a <code>BigUint</code>.",7,[[],["biguint",3]]],[11,"parse_bytes","","Creates and initializes a <code>BigUint</code>. The input slice must …",7,[[["u32",15]],[["option",4],["biguint",3]]]],[11,"from_radix_be","","Creates and initializes a <code>BigUint</code>. Each u8 of the input …",7,[[["u32",15]],[["option",4],["biguint",3]]]],[11,"from_radix_le","","Creates and initializes a <code>BigUint</code>. Each u8 of the input …",7,[[["u32",15]],[["option",4],["biguint",3]]]],[11,"to_bytes_be","","Returns the byte representation of the <code>BigUint</code> in …",7,[[],[["vec",3],["u8",15]]]],[11,"to_bytes_le","","Returns the byte representation of the <code>BigUint</code> in …",7,[[],[["vec",3],["u8",15]]]],[11,"to_u32_digits","","Returns the <code>u32</code> digits representation of the <code>BigUint</code> …",7,[[],[["vec",3],["u32",15]]]],[11,"to_u64_digits","","Returns the <code>u64</code> digits representation of the <code>BigUint</code> …",7,[[],[["vec",3],["u64",15]]]],[11,"iter_u32_digits","","Returns an iterator of <code>u32</code> digits representation of the …",7,[[],["u32digits",3]]],[11,"iter_u64_digits","","Returns an iterator of <code>u64</code> digits representation of the …",7,[[],["u64digits",3]]],[11,"to_str_radix","","Returns the integer formatted as a string in the given …",7,[[["u32",15]],["string",3]]],[11,"to_radix_be","","Returns the integer in the requested base in big-endian …",7,[[["u32",15]],[["vec",3],["u8",15]]]],[11,"to_radix_le","","Returns the integer in the requested base in …",7,[[["u32",15]],[["vec",3],["u8",15]]]],[11,"bits","","Determines the fewest bits necessary to express the …",7,[[],["u64",15]]],[11,"pow","","Returns <code>self ^ exponent</code>.",7,[[["u32",15]]]],[11,"modpow","","Returns <code>(self ^ exponent) % modulus</code>.",7,[[]]],[11,"sqrt","","Returns the truncated principal square root of <code>self</code> -- …",7,[[]]],[11,"cbrt","","Returns the truncated principal cube root of <code>self</code> -- see …",7,[[]]],[11,"nth_root","","Returns the truncated principal <code>n</code>th root of <code>self</code> -- see …",7,[[["u32",15]]]],[11,"trailing_zeros","","Returns the number of least-significant bits that are …",7,[[],[["u64",15],["option",4]]]],[11,"trailing_ones","","Returns the number of least-significant bits that are …",7,[[],["u64",15]]],[11,"count_ones","","Returns the number of one bits.",7,[[],["u64",15]]],[11,"bit","","Returns whether the bit in the given position is set",7,[[["u64",15]],["bool",15]]],[11,"set_bit","","Sets or clears the bit in the given position",7,[[["bool",15],["u64",15]]]]],"p":[[3,"TryFromBigIntError"],[8,"ToBigUint"],[4,"Sign"],[8,"ToBigInt"],[3,"BigInt"],[3,"U32Digits"],[3,"U64Digits"],[3,"BigUint"],[3,"ParseBigIntError"]]},\
"num_integer":{"doc":"Integer trait and functions.","i":[[8,"Roots","num_integer","Provides methods to compute an integer\'s square root, …",null,null],[10,"nth_root","","Returns the truncated principal <code>n</code>th root of an integer -- …",0,[[["u32",15]]]],[11,"sqrt","","Returns the truncated principal square root of an integer …",0,[[]]],[11,"cbrt","","Returns the truncated principal cube root of an integer --…",0,[[]]],[5,"cbrt","","Returns the truncated principal cube root of an integer --…",null,[[["roots",8]],["roots",8]]],[5,"nth_root","","Returns the truncated principal <code>n</code>th root of an integer -- …",null,[[["u32",15],["roots",8]],["roots",8]]],[5,"sqrt","","Returns the truncated principal square root of an integer …",null,[[["roots",8]],["roots",8]]],[8,"Average","","Provides methods to compute the average of two integers, …",null,null],[10,"average_ceil","","Returns the ceiling value of the average of <code>self</code> and <code>other</code>…",1,[[]]],[10,"average_floor","","Returns the floor value of the average of <code>self</code> and <code>other</code>. …",1,[[]]],[5,"average_ceil","","Returns the ceiling value of the average of <code>x</code> and <code>y</code> -- …",null,[[["average",8]],["average",8]]],[5,"average_floor","","Returns the floor value of the average of <code>x</code> and <code>y</code> -- see …",null,[[["average",8]],["average",8]]],[8,"Integer","","",null,null],[10,"div_floor","","Floored integer division.",2,[[]]],[10,"mod_floor","","Floored integer modulo, satisfying:",2,[[]]],[11,"div_ceil","","Ceiled integer division.",2,[[]]],[10,"gcd","","Greatest Common Divisor (GCD).",2,[[]]],[10,"lcm","","Lowest Common Multiple (LCM).",2,[[]]],[11,"gcd_lcm","","Greatest Common Divisor (GCD) and Lowest Common Multiple …",2,[[]]],[11,"extended_gcd","","Greatest common divisor and Bézout coefficients.",2,[[],["extendedgcd",3]]],[11,"extended_gcd_lcm","","Greatest common divisor, least common multiple, and …",2,[[]]],[10,"divides","","Deprecated, use <code>is_multiple_of</code> instead.",2,[[],["bool",15]]],[10,"is_multiple_of","","Returns <code>true</code> if <code>self</code> is a multiple of <code>other</code>.",2,[[],["bool",15]]],[10,"is_even","","Returns <code>true</code> if the number is even.",2,[[],["bool",15]]],[10,"is_odd","","Returns <code>true</code> if the number is odd.",2,[[],["bool",15]]],[10,"div_rem","","Simultaneous truncated integer division and modulus. …",2,[[]]],[11,"div_mod_floor","","Simultaneous floored integer division and modulus. …",2,[[]]],[11,"next_multiple_of","","Rounds up to nearest multiple of argument.",2,[[]]],[11,"prev_multiple_of","","Rounds down to nearest multiple of argument.",2,[[]]],[3,"ExtendedGcd","","Greatest common divisor and Bézout coefficients",null,null],[12,"gcd","","",3,null],[12,"x","","",3,null],[12,"y","","",3,null],[5,"div_rem","","Simultaneous integer division and modulus",null,[[["integer",8]]]],[5,"div_floor","","Floored integer division",null,[[["integer",8]],["integer",8]]],[5,"mod_floor","","Floored integer modulus",null,[[["integer",8]],["integer",8]]],[5,"div_mod_floor","","Simultaneous floored integer division and modulus",null,[[["integer",8]]]],[5,"div_ceil","","Ceiled integer division",null,[[["integer",8]],["integer",8]]],[5,"gcd","","Calculates the Greatest Common Divisor (GCD) of the …",null,[[["integer",8]],["integer",8]]],[5,"lcm","","Calculates the Lowest Common Multiple (LCM) of the number …",null,[[["integer",8]],["integer",8]]],[5,"gcd_lcm","","Calculates the Greatest Common Divisor (GCD) and Lowest …",null,[[["integer",8]]]],[3,"IterBinomial","","An iterator over binomial coefficients.",null,null],[11,"new","","For a given n, iterate over all binomial coefficients …",4,[[],["iterbinomial",3]]],[5,"binomial","","Calculate the binomial coefficient.",null,[[["clone",8],["integer",8]],[["clone",8],["integer",8]]]],[5,"multinomial","","Calculate the multinomial coefficient.",null,[[],[["clone",8],["integer",8]]]],[11,"from","","",3,[[]]],[11,"borrow","","",3,[[]]],[11,"borrow_mut","","",3,[[]]],[11,"try_from","","",3,[[],["result",4]]],[11,"into","","",3,[[]]],[11,"try_into","","",3,[[],["result",4]]],[11,"type_id","","",3,[[],["typeid",3]]],[11,"to_owned","","",3,[[]]],[11,"clone_into","","",3,[[]]],[11,"from","","",4,[[]]],[11,"borrow","","",4,[[]]],[11,"borrow_mut","","",4,[[]]],[11,"try_from","","",4,[[],["result",4]]],[11,"into","","",4,[[]]],[11,"try_into","","",4,[[],["result",4]]],[11,"into_iter","","",4,[[]]],[11,"type_id","","",4,[[],["typeid",3]]],[11,"fmt","","",3,[[["formatter",3]],["result",6]]],[11,"eq","","",3,[[["extendedgcd",3]],["bool",15]]],[11,"ne","","",3,[[["extendedgcd",3]],["bool",15]]],[11,"next","","",4,[[],["option",4]]],[11,"clone","","",3,[[],["extendedgcd",3]]],[11,"sqrt","","Returns the truncated principal square root of an integer …",0,[[]]],[11,"cbrt","","Returns the truncated principal cube root of an integer --…",0,[[]]]],"p":[[8,"Roots"],[8,"Average"],[8,"Integer"],[3,"ExtendedGcd"],[3,"IterBinomial"]]},\
"num_traits":{"doc":"Numeric traits for generic mathematics","i":[[0,"bounds","num_traits","",null,null],[8,"Bounded","num_traits::bounds","Numbers which have upper and lower bounds",null,null],[10,"min_value","","returns the smallest finite number this type can represent",0,[[]]],[10,"max_value","","returns the largest finite number this type can represent",0,[[]]],[0,"cast","num_traits","",null,null],[8,"ToPrimitive","num_traits::cast","A generic trait for converting a value to a number.",null,null],[11,"to_isize","","Converts the value of <code>self</code> to an <code>isize</code>. If the value …",1,[[],[["option",4],["isize",15]]]],[11,"to_i8","","Converts the value of <code>self</code> to an <code>i8</code>. If the value cannot …",1,[[],[["option",4],["i8",15]]]],[11,"to_i16","","Converts the value of <code>self</code> to an <code>i16</code>. If the value cannot …",1,[[],[["option",4],["i16",15]]]],[11,"to_i32","","Converts the value of <code>self</code> to an <code>i32</code>. If the value cannot …",1,[[],[["option",4],["i32",15]]]],[10,"to_i64","","Converts the value of <code>self</code> to an <code>i64</code>. If the value cannot …",1,[[],[["i64",15],["option",4]]]],[11,"to_i128","","Converts the value of <code>self</code> to an <code>i128</code>. If the value …",1,[[],[["option",4],["i128",15]]]],[11,"to_usize","","Converts the value of <code>self</code> to a <code>usize</code>. If the value …",1,[[],[["option",4],["usize",15]]]],[11,"to_u8","","Converts the value of <code>self</code> to a <code>u8</code>. If the value cannot be…",1,[[],[["option",4],["u8",15]]]],[11,"to_u16","","Converts the value of <code>self</code> to a <code>u16</code>. If the value cannot …",1,[[],[["option",4],["u16",15]]]],[11,"to_u32","","Converts the value of <code>self</code> to a <code>u32</code>. If the value cannot …",1,[[],[["option",4],["u32",15]]]],[10,"to_u64","","Converts the value of <code>self</code> to a <code>u64</code>. If the value cannot …",1,[[],[["u64",15],["option",4]]]],[11,"to_u128","","Converts the value of <code>self</code> to a <code>u128</code>. If the value cannot …",1,[[],[["u128",15],["option",4]]]],[11,"to_f32","","Converts the value of <code>self</code> to an <code>f32</code>. Overflows may map …",1,[[],[["option",4],["f32",15]]]],[11,"to_f64","","Converts the value of <code>self</code> to an <code>f64</code>. Overflows may map …",1,[[],[["f64",15],["option",4]]]],[8,"FromPrimitive","","A generic trait for converting a number to a value.",null,null],[11,"from_isize","","Converts an <code>isize</code> to return an optional value of this …",2,[[["isize",15]],["option",4]]],[11,"from_i8","","Converts an <code>i8</code> to return an optional value of this type. …",2,[[["i8",15]],["option",4]]],[11,"from_i16","","Converts an <code>i16</code> to return an optional value of this type. …",2,[[["i16",15]],["option",4]]],[11,"from_i32","","Converts an <code>i32</code> to return an optional value of this type. …",2,[[["i32",15]],["option",4]]],[10,"from_i64","","Converts an <code>i64</code> to return an optional value of this type. …",2,[[["i64",15]],["option",4]]],[11,"from_i128","","Converts an <code>i128</code> to return an optional value of this …",2,[[["i128",15]],["option",4]]],[11,"from_usize","","Converts a <code>usize</code> to return an optional value of this …",2,[[["usize",15]],["option",4]]],[11,"from_u8","","Converts an <code>u8</code> to return an optional value of this type. …",2,[[["u8",15]],["option",4]]],[11,"from_u16","","Converts an <code>u16</code> to return an optional value of this type. …",2,[[["u16",15]],["option",4]]],[11,"from_u32","","Converts an <code>u32</code> to return an optional value of this type. …",2,[[["u32",15]],["option",4]]],[10,"from_u64","","Converts an <code>u64</code> to return an optional value of this type. …",2,[[["u64",15]],["option",4]]],[11,"from_u128","","Converts an <code>u128</code> to return an optional value of this …",2,[[["u128",15]],["option",4]]],[11,"from_f32","","Converts a <code>f32</code> to return an optional value of this type. …",2,[[["f32",15]],["option",4]]],[11,"from_f64","","Converts a <code>f64</code> to return an optional value of this type. …",2,[[["f64",15]],["option",4]]],[5,"cast","","Cast from one machine scalar to another.",null,[[["numcast",8]],[["option",4],["numcast",8]]]],[8,"NumCast","","An interface for casting between machine scalars.",null,null],[10,"from","","Creates a number from another value that can be converted …",3,[[["toprimitive",8]],["option",4]]],[8,"AsPrimitive","","A generic interface for casting between machine scalars …",null,null],[10,"as_","","Convert a value to another, using the <code>as</code> operator.",4,[[]]],[0,"float","num_traits","",null,null],[8,"FloatCore","num_traits::float","Generic trait for floating point numbers that works with …",null,null],[10,"infinity","","Returns positive infinity.",5,[[]]],[10,"neg_infinity","","Returns negative infinity.",5,[[]]],[10,"nan","","Returns NaN.",5,[[]]],[10,"neg_zero","","Returns <code>-0.0</code>.",5,[[]]],[10,"min_value","","Returns the smallest finite value that this type can …",5,[[]]],[10,"min_positive_value","","Returns the smallest positive, normalized value that this …",5,[[]]],[10,"epsilon","","Returns epsilon, a small positive value.",5,[[]]],[10,"max_value","","Returns the largest finite value that this type can …",5,[[]]],[11,"is_nan","","Returns <code>true</code> if the number is NaN.",5,[[],["bool",15]]],[11,"is_infinite","","Returns <code>true</code> if the number is infinite.",5,[[],["bool",15]]],[11,"is_finite","","Returns <code>true</code> if the number is neither infinite or NaN.",5,[[],["bool",15]]],[11,"is_normal","","Returns <code>true</code> if the number is neither zero, infinite, …",5,[[],["bool",15]]],[10,"classify","","Returns the floating point category of the number. If …",5,[[],["fpcategory",4]]],[11,"floor","","Returns the largest integer less than or equal to a …",5,[[]]],[11,"ceil","","Returns the smallest integer greater than or equal to a …",5,[[]]],[11,"round","","Returns the nearest integer to a number. Round half-way …",5,[[]]],[11,"trunc","","Return the integer part of a number.",5,[[]]],[11,"fract","","Returns the fractional part of a number.",5,[[]]],[11,"abs","","Computes the absolute value of <code>self</code>. Returns …",5,[[]]],[11,"signum","","Returns a number that represents the sign of <code>self</code>.",5,[[]]],[11,"is_sign_positive","","Returns <code>true</code> if <code>self</code> is positive, including <code>+0.0</code> and …",5,[[],["bool",15]]],[11,"is_sign_negative","","Returns <code>true</code> if <code>self</code> is negative, including <code>-0.0</code> and …",5,[[],["bool",15]]],[11,"min","","Returns the minimum of the two numbers.",5,[[]]],[11,"max","","Returns the maximum of the two numbers.",5,[[]]],[11,"recip","","Returns the reciprocal (multiplicative inverse) of the …",5,[[]]],[11,"powi","","Raise a number to an integer power.",5,[[["i32",15]]]],[10,"to_degrees","","Converts to degrees, assuming the number is in radians.",5,[[]]],[10,"to_radians","","Converts to radians, assuming the number is in degrees.",5,[[]]],[10,"integer_decode","","Returns the mantissa, base 2 exponent, and sign as …",5,[[]]],[8,"Float","","Generic trait for floating point numbers",null,null],[10,"nan","","Returns the <code>NaN</code> value.",6,[[]]],[10,"infinity","","Returns the infinite value.",6,[[]]],[10,"neg_infinity","","Returns the negative infinite value.",6,[[]]],[10,"neg_zero","","Returns <code>-0.0</code>.",6,[[]]],[10,"min_value","","Returns the smallest finite value that this type can …",6,[[]]],[10,"min_positive_value","","Returns the smallest positive, normalized value that this …",6,[[]]],[11,"epsilon","","Returns epsilon, a small positive value.",6,[[]]],[10,"max_value","","Returns the largest finite value that this type can …",6,[[]]],[10,"is_nan","","Returns <code>true</code> if this value is <code>NaN</code> and false otherwise.",6,[[],["bool",15]]],[10,"is_infinite","","Returns <code>true</code> if this value is positive infinity or …",6,[[],["bool",15]]],[10,"is_finite","","Returns <code>true</code> if this number is neither infinite nor <code>NaN</code>.",6,[[],["bool",15]]],[10,"is_normal","","Returns <code>true</code> if the number is neither zero, infinite, …",6,[[],["bool",15]]],[10,"classify","","Returns the floating point category of the number. If …",6,[[],["fpcategory",4]]],[10,"floor","","Returns the largest integer less than or equal to a …",6,[[]]],[10,"ceil","","Returns the smallest integer greater than or equal to a …",6,[[]]],[10,"round","","Returns the nearest integer to a number. Round half-way …",6,[[]]],[10,"trunc","","Return the integer part of a number.",6,[[]]],[10,"fract","","Returns the fractional part of a number.",6,[[]]],[10,"abs","","Computes the absolute value of <code>self</code>. Returns <code>Float::nan()</code> …",6,[[]]],[10,"signum","","Returns a number that represents the sign of <code>self</code>.",6,[[]]],[10,"is_sign_positive","","Returns <code>true</code> if <code>self</code> is positive, including <code>+0.0</code>, …",6,[[],["bool",15]]],[10,"is_sign_negative","","Returns <code>true</code> if <code>self</code> is negative, including <code>-0.0</code>, …",6,[[],["bool",15]]],[10,"mul_add","","Fused multiply-add. Computes <code>(self * a) + b</code> with only one …",6,[[]]],[10,"recip","","Take the reciprocal (inverse) of a number, <code>1/x</code>.",6,[[]]],[10,"powi","","Raise a number to an integer power.",6,[[["i32",15]]]],[10,"powf","","Raise a number to a floating point power.",6,[[]]],[10,"sqrt","","Take the square root of a number.",6,[[]]],[10,"exp","","Returns <code>e^(self)</code>, (the exponential function).",6,[[]]],[10,"exp2","","Returns <code>2^(self)</code>.",6,[[]]],[10,"ln","","Returns the natural logarithm of the number.",6,[[]]],[10,"log","","Returns the logarithm of the number with respect to an …",6,[[]]],[10,"log2","","Returns the base 2 logarithm of the number.",6,[[]]],[10,"log10","","Returns the base 10 logarithm of the number.",6,[[]]],[11,"to_degrees","","Converts radians to degrees.",6,[[]]],[11,"to_radians","","Converts degrees to radians.",6,[[]]],[10,"max","","Returns the maximum of the two numbers.",6,[[]]],[10,"min","","Returns the minimum of the two numbers.",6,[[]]],[10,"abs_sub","","The positive difference of two numbers.",6,[[]]],[10,"cbrt","","Take the cubic root of a number.",6,[[]]],[10,"hypot","","Calculate the length of the hypotenuse of a right-angle …",6,[[]]],[10,"sin","","Computes the sine of a number (in radians).",6,[[]]],[10,"cos","","Computes the cosine of a number (in radians).",6,[[]]],[10,"tan","","Computes the tangent of a number (in radians).",6,[[]]],[10,"asin","","Computes the arcsine of a number. Return value is in …",6,[[]]],[10,"acos","","Computes the arccosine of a number. Return value is in …",6,[[]]],[10,"atan","","Computes the arctangent of a number. Return value is in …",6,[[]]],[10,"atan2","","Computes the four quadrant arctangent of <code>self</code> (<code>y</code>) and …",6,[[]]],[10,"sin_cos","","Simultaneously computes the sine and cosine of the …",6,[[]]],[10,"exp_m1","","Returns <code>e^(self) - 1</code> in a way that is accurate even if the…",6,[[]]],[10,"ln_1p","","Returns <code>ln(1+n)</code> (natural logarithm) more accurately than …",6,[[]]],[10,"sinh","","Hyperbolic sine function.",6,[[]]],[10,"cosh","","Hyperbolic cosine function.",6,[[]]],[10,"tanh","","Hyperbolic tangent function.",6,[[]]],[10,"asinh","","Inverse hyperbolic sine function.",6,[[]]],[10,"acosh","","Inverse hyperbolic cosine function.",6,[[]]],[10,"atanh","","Inverse hyperbolic tangent function.",6,[[]]],[10,"integer_decode","","Returns the mantissa, base 2 exponent, and sign as …",6,[[]]],[8,"FloatConst","","",null,null],[10,"E","","Return Euler’s number.",7,[[]]],[10,"FRAC_1_PI","","Return <code>1.0 / π</code>.",7,[[]]],[10,"FRAC_1_SQRT_2","","Return <code>1.0 / sqrt(2.0)</code>.",7,[[]]],[10,"FRAC_2_PI","","Return <code>2.0 / π</code>.",7,[[]]],[10,"FRAC_2_SQRT_PI","","Return <code>2.0 / sqrt(π)</code>.",7,[[]]],[10,"FRAC_PI_2","","Return <code>π / 2.0</code>.",7,[[]]],[10,"FRAC_PI_3","","Return <code>π / 3.0</code>.",7,[[]]],[10,"FRAC_PI_4","","Return <code>π / 4.0</code>.",7,[[]]],[10,"FRAC_PI_6","","Return <code>π / 6.0</code>.",7,[[]]],[10,"FRAC_PI_8","","Return <code>π / 8.0</code>.",7,[[]]],[10,"LN_10","","Return <code>ln(10.0)</code>.",7,[[]]],[10,"LN_2","","Return <code>ln(2.0)</code>.",7,[[]]],[10,"LOG10_E","","Return <code>log10(e)</code>.",7,[[]]],[10,"LOG2_E","","Return <code>log2(e)</code>.",7,[[]]],[10,"PI","","Return Archimedes’ constant <code>π</code>.",7,[[]]],[10,"SQRT_2","","Return <code>sqrt(2.0)</code>.",7,[[]]],[11,"TAU","","Return the full circle constant <code>τ</code>.",7,[[]]],[11,"LOG10_2","","Return <code>log10(2.0)</code>.",7,[[]]],[11,"LOG2_10","","Return <code>log2(10.0)</code>.",7,[[]]],[0,"identities","num_traits","",null,null],[8,"Zero","num_traits::identities","Defines an additive identity element for <code>Self</code>.",null,null],[10,"zero","","Returns the additive identity element of <code>Self</code>, <code>0</code>.",8,[[]]],[11,"set_zero","","Sets <code>self</code> to the additive identity element of <code>Self</code>, <code>0</code>.",8,[[]]],[10,"is_zero","","Returns <code>true</code> if <code>self</code> is equal to the additive identity.",8,[[],["bool",15]]],[8,"One","","Defines a multiplicative identity element for <code>Self</code>.",null,null],[10,"one","","Returns the multiplicative identity element of <code>Self</code>, <code>1</code>.",9,[[]]],[11,"set_one","","Sets <code>self</code> to the multiplicative identity element of <code>Self</code>, …",9,[[]]],[11,"is_one","","Returns <code>true</code> if <code>self</code> is equal to the multiplicative …",9,[[],["bool",15]]],[5,"zero","","Returns the additive identity, <code>0</code>.",null,[[],["zero",8]]],[5,"one","","Returns the multiplicative identity, <code>1</code>.",null,[[],["one",8]]],[0,"int","num_traits","",null,null],[8,"PrimInt","num_traits::int","Generic trait for primitive integers.",null,null],[10,"count_ones","","Returns the number of ones in the binary representation …",10,[[],["u32",15]]],[10,"count_zeros","","Returns the number of zeros in the binary representation …",10,[[],["u32",15]]],[10,"leading_zeros","","Returns the number of leading zeros in the binary …",10,[[],["u32",15]]],[10,"trailing_zeros","","Returns the number of trailing zeros in the binary …",10,[[],["u32",15]]],[10,"rotate_left","","Shifts the bits to the left by a specified amount, <code>n</code>, …",10,[[["u32",15]]]],[10,"rotate_right","","Shifts the bits to the right by a specified amount, <code>n</code>, …",10,[[["u32",15]]]],[10,"signed_shl","","Shifts the bits to the left by a specified amount, <code>n</code>, …",10,[[["u32",15]]]],[10,"signed_shr","","Shifts the bits to the right by a specified amount, <code>n</code>, …",10,[[["u32",15]]]],[10,"unsigned_shl","","Shifts the bits to the left by a specified amount, <code>n</code>, …",10,[[["u32",15]]]],[10,"unsigned_shr","","Shifts the bits to the right by a specified amount, <code>n</code>, …",10,[[["u32",15]]]],[10,"swap_bytes","","Reverses the byte order of the integer.",10,[[]]],[10,"from_be","","Convert an integer from big endian to the target\'s …",10,[[]]],[10,"from_le","","Convert an integer from little endian to the target\'s …",10,[[]]],[10,"to_be","","Convert <code>self</code> to big endian from the target\'s endianness.",10,[[]]],[10,"to_le","","Convert <code>self</code> to little endian from the target\'s …",10,[[]]],[10,"pow","","Raises self to the power of <code>exp</code>, using exponentiation by …",10,[[["u32",15]]]],[0,"ops","num_traits","",null,null],[0,"checked","num_traits::ops","",null,null],[8,"CheckedAdd","num_traits::ops::checked","Performs addition that returns <code>None</code> instead of wrapping …",null,null],[10,"checked_add","","Adds two numbers, checking for overflow. If overflow …",11,[[],["option",4]]],[8,"CheckedSub","","Performs subtraction that returns <code>None</code> instead of …",null,null],[10,"checked_sub","","Subtracts two numbers, checking for underflow. If …",12,[[],["option",4]]],[8,"CheckedMul","","Performs multiplication that returns <code>None</code> instead of …",null,null],[10,"checked_mul","","Multiplies two numbers, checking for underflow or …",13,[[],["option",4]]],[8,"CheckedDiv","","Performs division that returns <code>None</code> instead of panicking …",null,null],[10,"checked_div","","Divides two numbers, checking for underflow, overflow and …",14,[[],["option",4]]],[8,"CheckedRem","","Performs an integral remainder that returns <code>None</code> instead …",null,null],[10,"checked_rem","","Finds the remainder of dividing two numbers, checking for …",15,[[],["option",4]]],[8,"CheckedNeg","","Performs negation that returns <code>None</code> if the result can\'t …",null,null],[10,"checked_neg","","Negates a number, returning <code>None</code> for results that can\'t …",16,[[],["option",4]]],[8,"CheckedShl","","Performs a left shift that returns <code>None</code> on shifts larger …",null,null],[10,"checked_shl","","Checked shift left. Computes <code>self << rhs</code>, returning <code>None</code> …",17,[[["u32",15]],["option",4]]],[8,"CheckedShr","","Performs a right shift that returns <code>None</code> on shifts larger …",null,null],[10,"checked_shr","","Checked shift right. Computes <code>self >> rhs</code>, returning <code>None</code> …",18,[[["u32",15]],["option",4]]],[0,"inv","num_traits::ops","",null,null],[8,"Inv","num_traits::ops::inv","Unary operator for retrieving the multiplicative inverse, …",null,null],[16,"Output","","The result after applying the operator.",19,null],[10,"inv","","Returns the multiplicative inverse of <code>self</code>.",19,[[]]],[0,"mul_add","num_traits::ops","",null,null],[8,"MulAdd","num_traits::ops::mul_add","Fused multiply-add. Computes <code>(self * a) + b</code> with only one …",null,null],[16,"Output","","The resulting type after applying the fused multiply-add.",20,null],[10,"mul_add","","Performs the fused multiply-add operation.",20,[[]]],[8,"MulAddAssign","","The fused multiply-add assignment operation.",null,null],[10,"mul_add_assign","","Performs the fused multiply-add operation.",21,[[]]],[0,"overflowing","num_traits::ops","",null,null],[8,"OverflowingAdd","num_traits::ops::overflowing","Performs addition with a flag for overflow.",null,null],[10,"overflowing_add","","Returns a tuple of the sum along with a boolean …",22,[[]]],[8,"OverflowingSub","","Performs substraction with a flag for overflow.",null,null],[10,"overflowing_sub","","Returns a tuple of the difference along with a boolean …",23,[[]]],[8,"OverflowingMul","","Performs multiplication with a flag for overflow.",null,null],[10,"overflowing_mul","","Returns a tuple of the product along with a boolean …",24,[[]]],[0,"saturating","num_traits::ops","",null,null],[8,"Saturating","num_traits::ops::saturating","Saturating math operations. Deprecated, use <code>SaturatingAdd</code>…",null,null],[10,"saturating_add","","Saturating addition operator. Returns a+b, saturating at …",25,[[]]],[10,"saturating_sub","","Saturating subtraction operator. Returns a-b, saturating …",25,[[]]],[8,"SaturatingAdd","","Performs addition that saturates at the numeric bounds …",null,null],[10,"saturating_add","","Saturating addition. Computes <code>self + other</code>, saturating at …",26,[[]]],[8,"SaturatingSub","","Performs subtraction that saturates at the numeric bounds …",null,null],[10,"saturating_sub","","Saturating subtraction. Computes <code>self - other</code>, saturating …",27,[[]]],[8,"SaturatingMul","","Performs multiplication that saturates at the numeric …",null,null],[10,"saturating_mul","","Saturating multiplication. Computes <code>self * other</code>, …",28,[[]]],[0,"wrapping","num_traits::ops","",null,null],[8,"WrappingAdd","num_traits::ops::wrapping","Performs addition that wraps around on overflow.",null,null],[10,"wrapping_add","","Wrapping (modular) addition. Computes <code>self + other</code>, …",29,[[]]],[8,"WrappingSub","","Performs subtraction that wraps around on overflow.",null,null],[10,"wrapping_sub","","Wrapping (modular) subtraction. Computes <code>self - other</code>, …",30,[[]]],[8,"WrappingMul","","Performs multiplication that wraps around on overflow.",null,null],[10,"wrapping_mul","","Wrapping (modular) multiplication. Computes <code>self * other</code>, …",31,[[]]],[8,"WrappingNeg","","Performs a negation that does not panic.",null,null],[10,"wrapping_neg","","Wrapping (modular) negation. Computes <code>-self</code>, wrapping …",32,[[]]],[8,"WrappingShl","","Performs a left shift that does not panic.",null,null],[10,"wrapping_shl","","Panic-free bitwise shift-left; yields <code>self << mask(rhs)</code>, …",33,[[["u32",15]]]],[8,"WrappingShr","","Performs a right shift that does not panic.",null,null],[10,"wrapping_shr","","Panic-free bitwise shift-right; yields <code>self >> mask(rhs)</code>, …",34,[[["u32",15]]]],[0,"pow","num_traits","",null,null],[8,"Pow","num_traits::pow","Binary operator for raising a value to a power.",null,null],[16,"Output","","The result after applying the operator.",35,null],[10,"pow","","Returns <code>self</code> to the power <code>rhs</code>.",35,[[]]],[5,"pow","","Raises a value to the power of exp, using exponentiation …",null,[[["usize",15],["mul",8],["clone",8],["one",8]],[["mul",8],["clone",8],["one",8]]]],[5,"checked_pow","","Raises a value to the power of exp, returning <code>None</code> if an …",null,[[["usize",15],["checkedmul",8],["clone",8],["one",8]],[["option",4],["checkedmul",8],["clone",8],["one",8]]]],[0,"real","num_traits","",null,null],[8,"Real","num_traits::real","A trait for real number types that do not necessarily have…",null,null],[10,"min_value","","Returns the smallest finite value that this type can …",36,[[]]],[10,"min_positive_value","","Returns the smallest positive, normalized value that this …",36,[[]]],[10,"epsilon","","Returns epsilon, a small positive value.",36,[[]]],[10,"max_value","","Returns the largest finite value that this type can …",36,[[]]],[10,"floor","","Returns the largest integer less than or equal to a …",36,[[]]],[10,"ceil","","Returns the smallest integer greater than or equal to a …",36,[[]]],[10,"round","","Returns the nearest integer to a number. Round half-way …",36,[[]]],[10,"trunc","","Return the integer part of a number.",36,[[]]],[10,"fract","","Returns the fractional part of a number.",36,[[]]],[10,"abs","","Computes the absolute value of <code>self</code>. Returns <code>Float::nan()</code> …",36,[[]]],[10,"signum","","Returns a number that represents the sign of <code>self</code>.",36,[[]]],[10,"is_sign_positive","","Returns <code>true</code> if <code>self</code> is positive, including <code>+0.0</code>, …",36,[[],["bool",15]]],[10,"is_sign_negative","","Returns <code>true</code> if <code>self</code> is negative, including <code>-0.0</code>, …",36,[[],["bool",15]]],[10,"mul_add","","Fused multiply-add. Computes <code>(self * a) + b</code> with only one …",36,[[]]],[10,"recip","","Take the reciprocal (inverse) of a number, <code>1/x</code>.",36,[[]]],[10,"powi","","Raise a number to an integer power.",36,[[["i32",15]]]],[10,"powf","","Raise a number to a real number power.",36,[[]]],[10,"sqrt","","Take the square root of a number.",36,[[]]],[10,"exp","","Returns <code>e^(self)</code>, (the exponential function).",36,[[]]],[10,"exp2","","Returns <code>2^(self)</code>.",36,[[]]],[10,"ln","","Returns the natural logarithm of the number.",36,[[]]],[10,"log","","Returns the logarithm of the number with respect to an …",36,[[]]],[10,"log2","","Returns the base 2 logarithm of the number.",36,[[]]],[10,"log10","","Returns the base 10 logarithm of the number.",36,[[]]],[10,"to_degrees","","Converts radians to degrees.",36,[[]]],[10,"to_radians","","Converts degrees to radians.",36,[[]]],[10,"max","","Returns the maximum of the two numbers.",36,[[]]],[10,"min","","Returns the minimum of the two numbers.",36,[[]]],[10,"abs_sub","","The positive difference of two numbers.",36,[[]]],[10,"cbrt","","Take the cubic root of a number.",36,[[]]],[10,"hypot","","Calculate the length of the hypotenuse of a right-angle …",36,[[]]],[10,"sin","","Computes the sine of a number (in radians).",36,[[]]],[10,"cos","","Computes the cosine of a number (in radians).",36,[[]]],[10,"tan","","Computes the tangent of a number (in radians).",36,[[]]],[10,"asin","","Computes the arcsine of a number. Return value is in …",36,[[]]],[10,"acos","","Computes the arccosine of a number. Return value is in …",36,[[]]],[10,"atan","","Computes the arctangent of a number. Return value is in …",36,[[]]],[10,"atan2","","Computes the four quadrant arctangent of <code>self</code> (<code>y</code>) and …",36,[[]]],[10,"sin_cos","","Simultaneously computes the sine and cosine of the …",36,[[]]],[10,"exp_m1","","Returns <code>e^(self) - 1</code> in a way that is accurate even if the…",36,[[]]],[10,"ln_1p","","Returns <code>ln(1+n)</code> (natural logarithm) more accurately than …",36,[[]]],[10,"sinh","","Hyperbolic sine function.",36,[[]]],[10,"cosh","","Hyperbolic cosine function.",36,[[]]],[10,"tanh","","Hyperbolic tangent function.",36,[[]]],[10,"asinh","","Inverse hyperbolic sine function.",36,[[]]],[10,"acosh","","Inverse hyperbolic cosine function.",36,[[]]],[10,"atanh","","Inverse hyperbolic tangent function.",36,[[]]],[0,"sign","num_traits","",null,null],[8,"Signed","num_traits::sign","Useful functions for signed numbers (i.e. numbers that …",null,null],[10,"abs","","Computes the absolute value.",37,[[]]],[10,"abs_sub","","The positive difference of two numbers.",37,[[]]],[10,"signum","","Returns the sign of the number.",37,[[]]],[10,"is_positive","","Returns true if the number is positive and false if the …",37,[[],["bool",15]]],[10,"is_negative","","Returns true if the number is negative and false if the …",37,[[],["bool",15]]],[5,"abs","","Computes the absolute value.",null,[[["signed",8]],["signed",8]]],[5,"abs_sub","","The positive difference of two numbers.",null,[[["signed",8]],["signed",8]]],[5,"signum","","Returns the sign of the number.",null,[[["signed",8]],["signed",8]]],[8,"Unsigned","","A trait for values which cannot be negative",null,null],[8,"Num","num_traits","The base trait for numeric types, covering <code>0</code> and <code>1</code> values,…",null,null],[16,"FromStrRadixErr","","",38,null],[10,"from_str_radix","","Convert from a string and radix (typically <code>2..=36</code>).",38,[[["u32",15],["str",15]],["result",4]]],[8,"NumOps","","The trait for types implementing basic numeric operations",null,null],[8,"NumRef","","The trait for <code>Num</code> types which also implement numeric …",null,null],[8,"RefNum","","The trait for references which implement numeric …",null,null],[8,"NumAssignOps","","The trait for types implementing numeric assignment …",null,null],[8,"NumAssign","","The trait for <code>Num</code> types which also implement assignment …",null,null],[8,"NumAssignRef","","The trait for <code>NumAssign</code> types which also implement …",null,null],[4,"FloatErrorKind","","",null,null],[13,"Empty","","",39,null],[13,"Invalid","","",39,null],[3,"ParseFloatError","","",null,null],[12,"kind","","",40,null],[5,"clamp","","A value bounded by a minimum and a maximum",null,[[["partialord",8]],["partialord",8]]],[5,"clamp_min","","A value bounded by a minimum value",null,[[["partialord",8]],["partialord",8]]],[5,"clamp_max","","A value bounded by a maximum value",null,[[["partialord",8]],["partialord",8]]],[11,"from","","",39,[[]]],[11,"borrow","","",39,[[]]],[11,"borrow_mut","","",39,[[]]],[11,"try_from","","",39,[[],["result",4]]],[11,"into","","",39,[[]]],[11,"try_into","","",39,[[],["result",4]]],[11,"type_id","","",39,[[],["typeid",3]]],[11,"from","","",40,[[]]],[11,"borrow","","",40,[[]]],[11,"borrow_mut","","",40,[[]]],[11,"try_from","","",40,[[],["result",4]]],[11,"into","","",40,[[]]],[11,"try_into","","",40,[[],["result",4]]],[11,"type_id","","",40,[[],["typeid",3]]],[11,"to_string","","",40,[[],["string",3]]],[11,"fmt","","",39,[[["formatter",3]],["result",6]]],[11,"fmt","","",40,[[["formatter",3]],["result",6]]],[11,"fmt","","",40,[[["formatter",3]],["result",6]]]],"p":[[8,"Bounded"],[8,"ToPrimitive"],[8,"FromPrimitive"],[8,"NumCast"],[8,"AsPrimitive"],[8,"FloatCore"],[8,"Float"],[8,"FloatConst"],[8,"Zero"],[8,"One"],[8,"PrimInt"],[8,"CheckedAdd"],[8,"CheckedSub"],[8,"CheckedMul"],[8,"CheckedDiv"],[8,"CheckedRem"],[8,"CheckedNeg"],[8,"CheckedShl"],[8,"CheckedShr"],[8,"Inv"],[8,"MulAdd"],[8,"MulAddAssign"],[8,"OverflowingAdd"],[8,"OverflowingSub"],[8,"OverflowingMul"],[8,"Saturating"],[8,"SaturatingAdd"],[8,"SaturatingSub"],[8,"SaturatingMul"],[8,"WrappingAdd"],[8,"WrappingSub"],[8,"WrappingMul"],[8,"WrappingNeg"],[8,"WrappingShl"],[8,"WrappingShr"],[8,"Pow"],[8,"Real"],[8,"Signed"],[8,"Num"],[4,"FloatErrorKind"],[3,"ParseFloatError"]]},\
"yasna":{"doc":"A library for reading and writing ASN.1 data.","i":[[0,"tags","yasna","Provides universal tag constants.",null,null],[17,"TAG_EOC","yasna::tags","A special tag representing \\\"end of contents\\\".",null,null],[17,"TAG_BOOLEAN","","A universal tag for BOOLEAN.",null,null],[17,"TAG_INTEGER","","A universal tag for INTEGER.",null,null],[17,"TAG_BITSTRING","","A universal tag for BITSTRING.",null,null],[17,"TAG_OCTETSTRING","","A universal tag for OCTETSTRING.",null,null],[17,"TAG_NULL","","A universal tag for NULL.",null,null],[17,"TAG_OID","","A universal tag for object identifiers.",null,null],[17,"TAG_OBJECT_DESCRIPTOR","","A universal tag for object descriptors.",null,null],[17,"TAG_EXT","","A universal tag for external/instance-of types.",null,null],[17,"TAG_REAL","","A universal tag for REAL.",null,null],[17,"TAG_ENUM","","A universal tag for enumerated types.",null,null],[17,"TAG_EMBEDDED_PDV","","A universal tag for embedded-pdv types.",null,null],[17,"TAG_UTF8STRING","","A universal tag for UTF8String.",null,null],[17,"TAG_RELATIVE_OID","","A universal tag for relative object identifiers.",null,null],[17,"TAG_TIME","","A universal tag for TIME.",null,null],[17,"TAG_SEQUENCE","","A universal tag for SEQUENCE/SEQUENCE OF.",null,null],[17,"TAG_SET","","A universal tag for SET/SET OF.",null,null],[17,"TAG_NUMERICSTRING","","A universal tag for NumericString.",null,null],[17,"TAG_PRINTABLESTRING","","A universal tag for PrintableString.",null,null],[17,"TAG_TELETEXSTRING","","A universal tag for TeletexString.",null,null],[17,"TAG_VIDEOTEXSTRING","","A universal tag for VideotexString.",null,null],[17,"TAG_IA5STRING","","A universal tag for IA5String.",null,null],[17,"TAG_UTCTIME","","A universal tag for UTCTime.",null,null],[17,"TAG_GENERALIZEDTIME","","A universal tag for GeneralizedTime.",null,null],[17,"TAG_GRAPHICSTRING","","A universal tag for GraphicString.",null,null],[17,"TAG_VISIBLESTRING","","A universal tag for VisibleString.",null,null],[17,"TAG_GENERALSTRING","","A universal tag for GeneralString.",null,null],[17,"TAG_UNIVERSALSTRING","","A universal tag for UniversalString.",null,null],[17,"TAG_BMPSTRING","","A universal tag for BMPString.",null,null],[17,"TAG_DATE","","A universal tag for DATE.",null,null],[17,"TAG_TIME_OF_DAY","","A universal tag for TIME-OF-DAY.",null,null],[17,"TAG_DATE_TIME","","A universal tag for DATE-TIME.",null,null],[17,"TAG_DURATION","","A universal tag for DURATION.",null,null],[17,"TAG_OID_INTL_RESID","","A universal tag for OID internationalized resource …",null,null],[17,"TAG_RELATIVE_OID_INTL_RESID","","A universal tag for relative OID internationalized …",null,null],[0,"models","yasna","Provides datatypes which correspond to ASN.1 types.",null,null],[3,"ObjectIdentifier","yasna::models","A type that represents object identifiers.",null,null],[3,"ParseOidError","","An error indicating failure to parse an Object identifier",null,null],[3,"UTCTime","","Date and time between 1950-01-01T00:00:00Z and …",null,null],[3,"GeneralizedTime","","Date and time between 0000-01-01T00:00:00Z and …",null,null],[3,"TaggedDerValue","","Container for a tag and arbitrary DER value.",null,null],[5,"construct_der","yasna","Constructs DER-encoded data as <code>Vec<u8></code>.",null,[[],[["vec",3],["u8",15]]]],[5,"try_construct_der","","Tries to construct DER-encoded data as <code>Vec<u8></code>.",null,[[],[["vec",3],["result",4]]]],[5,"construct_der_seq","","Constructs DER-encoded sequence of data as <code>Vec<u8></code>.",null,[[],[["vec",3],["u8",15]]]],[5,"try_construct_der_seq","","Tries to construct a DER-encoded sequence of data as …",null,[[],[["vec",3],["result",4]]]],[3,"DERWriter","","A writer object that accepts an ASN.1 value.",null,null],[3,"DERWriterSeq","","A writer object that accepts ASN.1 values.",null,null],[3,"DERWriterSet","","A writer object that accepts ASN.1 values.",null,null],[5,"parse_ber_general","","Parses DER/BER-encoded data.",null,[[["bermode",4]],["asn1result",6]]],[5,"parse_ber","","Parses BER-encoded data.",null,[[],["asn1result",6]]],[5,"parse_der","","Parses DER-encoded data.",null,[[],["asn1result",6]]],[4,"BERMode","","Used by [<code>BERReader</code>] to determine whether or not to enforce…",null,null],[13,"Ber","","Use BER (Basic Encoding Rules).",0,null],[13,"Der","","Use DER (Distinguished Encoding Rules).",0,null],[3,"BERReader","","A reader object for BER/DER-encoded ASN.1 data.",null,null],[3,"BERReaderSeq","","A reader object for a sequence of BER/DER-encoded ASN.1 …",null,null],[3,"BERReaderSet","","A reader object for a set of BER/DER-encoded ASN.1 data.",null,null],[3,"ASN1Error","","",null,null],[4,"ASN1ErrorKind","","",null,null],[13,"Eof","","",1,null],[13,"Extra","","",1,null],[13,"IntegerOverflow","","",1,null],[13,"StackOverflow","","",1,null],[13,"Invalid","","",1,null],[6,"ASN1Result","","",null,null],[8,"BERDecodable","","Types decodable in BER.",null,null],[10,"decode_ber","","Reads an ASN.1 value from <code>BERReader</code> and converts it to …",2,[[["berreader",3]],["asn1result",6]]],[5,"decode_ber_general","","Decodes DER/BER-encoded data.",null,[[["bermode",4]],[["berdecodable",8],["asn1result",6]]]],[5,"decode_ber","","Reads an ASN.1 value from <code>&[u8]</code>.",null,[[],[["berdecodable",8],["asn1result",6]]]],[5,"decode_der","","Reads an ASN.1 value from <code>&[u8]</code>.",null,[[],[["berdecodable",8],["asn1result",6]]]],[8,"DEREncodable","","Types encodable in DER.",null,null],[10,"encode_der","","Writes the value as an DER-encoded ASN.1 value.",3,[[["derwriter",3]]]],[5,"encode_der","","Encodes a value to DER-encoded ASN.1 data.",null,[[],[["vec",3],["u8",15]]]],[4,"PCBit","","A value of the ASN.1 primitive/constructed (\\\"P/C\\\") bit.",null,null],[13,"Primitive","","The bit\'s value is \\\"Primitive\\\"",4,null],[13,"Constructed","","The bit\'s value is \\\"Constructed\\\"",4,null],[4,"TagClass","","An ASN.1 tag class, used in [<code>Tag</code>].",null,null],[13,"Universal","","The UNIVERSAL tag class",5,null],[13,"Application","","The APPLICATION tag class",5,null],[13,"ContextSpecific","","The CONTEXT-SPECIFIC tag class",5,null],[13,"Private","","The PRIVATE tag class",5,null],[3,"Tag","","An ASN.1 tag.",null,null],[12,"tag_class","","The tag class",6,null],[12,"tag_number","","The tag number",6,null],[11,"application","","Constructs an APPLICATION tag, namely [APPLICATION n].",6,[[["u64",15]],["tag",3]]],[11,"context","","Constructs a context specific tag, namely [n].",6,[[["u64",15]],["tag",3]]],[11,"private","","Constructs a PRIVATE tag, namely [PRIVATE n].",6,[[["u64",15]],["tag",3]]],[11,"from","yasna::models","",7,[[]]],[11,"borrow","","",7,[[]]],[11,"borrow_mut","","",7,[[]]],[11,"try_from","","",7,[[],["result",4]]],[11,"into","","",7,[[]]],[11,"try_into","","",7,[[],["result",4]]],[11,"type_id","","",7,[[],["typeid",3]]],[11,"to_owned","","",7,[[]]],[11,"clone_into","","",7,[[]]],[11,"to_string","","",7,[[],["string",3]]],[11,"from","","",8,[[]]],[11,"borrow","","",8,[[]]],[11,"borrow_mut","","",8,[[]]],[11,"try_from","","",8,[[],["result",4]]],[11,"into","","",8,[[]]],[11,"try_into","","",8,[[],["result",4]]],[11,"type_id","","",8,[[],["typeid",3]]],[11,"to_owned","","",8,[[]]],[11,"clone_into","","",8,[[]]],[11,"to_string","","",8,[[],["string",3]]],[11,"from","","",9,[[]]],[11,"borrow","","",9,[[]]],[11,"borrow_mut","","",9,[[]]],[11,"try_from","","",9,[[],["result",4]]],[11,"into","","",9,[[]]],[11,"try_into","","",9,[[],["result",4]]],[11,"type_id","","",9,[[],["typeid",3]]],[11,"to_owned","","",9,[[]]],[11,"clone_into","","",9,[[]]],[11,"from","","",10,[[]]],[11,"borrow","","",10,[[]]],[11,"borrow_mut","","",10,[[]]],[11,"try_from","","",10,[[],["result",4]]],[11,"into","","",10,[[]]],[11,"try_into","","",10,[[],["result",4]]],[11,"type_id","","",10,[[],["typeid",3]]],[11,"to_owned","","",10,[[]]],[11,"clone_into","","",10,[[]]],[11,"from","","",11,[[]]],[11,"borrow","","",11,[[]]],[11,"borrow_mut","","",11,[[]]],[11,"try_from","","",11,[[],["result",4]]],[11,"into","","",11,[[]]],[11,"try_into","","",11,[[],["result",4]]],[11,"type_id","","",11,[[],["typeid",3]]],[11,"to_owned","","",11,[[]]],[11,"clone_into","","",11,[[]]],[11,"from","yasna","",12,[[]]],[11,"borrow","","",12,[[]]],[11,"borrow_mut","","",12,[[]]],[11,"try_from","","",12,[[],["result",4]]],[11,"into","","",12,[[]]],[11,"try_into","","",12,[[],["result",4]]],[11,"type_id","","",12,[[],["typeid",3]]],[11,"from","","",13,[[]]],[11,"borrow","","",13,[[]]],[11,"borrow_mut","","",13,[[]]],[11,"try_from","","",13,[[],["result",4]]],[11,"into","","",13,[[]]],[11,"try_into","","",13,[[],["result",4]]],[11,"type_id","","",13,[[],["typeid",3]]],[11,"from","","",14,[[]]],[11,"borrow","","",14,[[]]],[11,"borrow_mut","","",14,[[]]],[11,"try_from","","",14,[[],["result",4]]],[11,"into","","",14,[[]]],[11,"try_into","","",14,[[],["result",4]]],[11,"type_id","","",14,[[],["typeid",3]]],[11,"from","","",15,[[]]],[11,"borrow","","",15,[[]]],[11,"borrow_mut","","",15,[[]]],[11,"try_from","","",15,[[],["result",4]]],[11,"into","","",15,[[]]],[11,"try_into","","",15,[[],["result",4]]],[11,"type_id","","",15,[[],["typeid",3]]],[11,"to_owned","","",15,[[]]],[11,"clone_into","","",15,[[]]],[11,"to_string","","",15,[[],["string",3]]],[11,"from","","",1,[[]]],[11,"borrow","","",1,[[]]],[11,"borrow_mut","","",1,[[]]],[11,"try_from","","",1,[[],["result",4]]],[11,"into","","",1,[[]]],[11,"try_into","","",1,[[],["result",4]]],[11,"type_id","","",1,[[],["typeid",3]]],[11,"to_owned","","",1,[[]]],[11,"clone_into","","",1,[[]]],[11,"from","","",0,[[]]],[11,"borrow","","",0,[[]]],[11,"borrow_mut","","",0,[[]]],[11,"try_from","","",0,[[],["result",4]]],[11,"into","","",0,[[]]],[11,"try_into","","",0,[[],["result",4]]],[11,"type_id","","",0,[[],["typeid",3]]],[11,"to_owned","","",0,[[]]],[11,"clone_into","","",0,[[]]],[11,"from","","",16,[[]]],[11,"borrow","","",16,[[]]],[11,"borrow_mut","","",16,[[]]],[11,"try_from","","",16,[[],["result",4]]],[11,"into","","",16,[[]]],[11,"try_into","","",16,[[],["result",4]]],[11,"type_id","","",16,[[],["typeid",3]]],[11,"from","","",17,[[]]],[11,"borrow","","",17,[[]]],[11,"borrow_mut","","",17,[[]]],[11,"try_from","","",17,[[],["result",4]]],[11,"into","","",17,[[]]],[11,"try_into","","",17,[[],["result",4]]],[11,"type_id","","",17,[[],["typeid",3]]],[11,"from","","",18,[[]]],[11,"borrow","","",18,[[]]],[11,"borrow_mut","","",18,[[]]],[11,"try_from","","",18,[[],["result",4]]],[11,"into","","",18,[[]]],[11,"try_into","","",18,[[],["result",4]]],[11,"type_id","","",18,[[],["typeid",3]]],[11,"from","","",4,[[]]],[11,"borrow","","",4,[[]]],[11,"borrow_mut","","",4,[[]]],[11,"try_from","","",4,[[],["result",4]]],[11,"into","","",4,[[]]],[11,"try_into","","",4,[[],["result",4]]],[11,"type_id","","",4,[[],["typeid",3]]],[11,"to_owned","","",4,[[]]],[11,"clone_into","","",4,[[]]],[11,"from","","",5,[[]]],[11,"borrow","","",5,[[]]],[11,"borrow_mut","","",5,[[]]],[11,"try_from","","",5,[[],["result",4]]],[11,"into","","",5,[[]]],[11,"try_into","","",5,[[],["result",4]]],[11,"type_id","","",5,[[],["typeid",3]]],[11,"to_owned","","",5,[[]]],[11,"clone_into","","",5,[[]]],[11,"from","","",6,[[]]],[11,"borrow","","",6,[[]]],[11,"borrow_mut","","",6,[[]]],[11,"try_from","","",6,[[],["result",4]]],[11,"into","","",6,[[]]],[11,"try_into","","",6,[[],["result",4]]],[11,"type_id","","",6,[[],["typeid",3]]],[11,"to_owned","","",6,[[]]],[11,"clone_into","","",6,[[]]],[11,"decode_ber","yasna::models","",7,[[["berreader",3]],["asn1result",6]]],[11,"decode_ber","","",9,[[["berreader",3]],["asn1result",6]]],[11,"decode_ber","","",10,[[["berreader",3]],["asn1result",6]]],[11,"decode_ber","","",11,[[["berreader",3]],["asn1result",6]]],[11,"encode_der","","",7,[[["derwriter",3]]]],[11,"encode_der","","",9,[[["derwriter",3]]]],[11,"encode_der","","",10,[[["derwriter",3]]]],[11,"from","","",7,[[["vec",3],["u64",15]],["objectidentifier",3]]],[11,"fmt","","",7,[[["formatter",3]],["result",6]]],[11,"fmt","","",8,[[["formatter",3]],["result",6]]],[11,"fmt","","",9,[[["formatter",3]],["result",6]]],[11,"fmt","","",10,[[["formatter",3]],["result",6]]],[11,"fmt","","",11,[[["formatter",3]],["result",6]]],[11,"fmt","yasna","",12,[[["formatter",3]],["result",6]]],[11,"fmt","","",13,[[["formatter",3]],["result",6]]],[11,"fmt","","",14,[[["formatter",3]],["result",6]]],[11,"fmt","","",15,[[["formatter",3]],["result",6]]],[11,"fmt","","",1,[[["formatter",3]],["result",6]]],[11,"fmt","","",0,[[["formatter",3]],["result",6]]],[11,"fmt","","",16,[[["formatter",3]],["result",6]]],[11,"fmt","","",17,[[["formatter",3]],["result",6]]],[11,"fmt","","",18,[[["formatter",3]],["result",6]]],[11,"fmt","","",4,[[["formatter",3]],["result",6]]],[11,"fmt","","",5,[[["formatter",3]],["result",6]]],[11,"fmt","","",6,[[["formatter",3]],["result",6]]],[11,"fmt","yasna::models","",7,[[["formatter",3]],[["error",3],["result",4]]]],[11,"fmt","","",8,[[["formatter",3]],[["error",3],["result",4]]]],[11,"fmt","yasna","",15,[[["formatter",3]],[["error",3],["result",4]]]],[11,"eq","yasna::models","",7,[[["objectidentifier",3]],["bool",15]]],[11,"ne","","",7,[[["objectidentifier",3]],["bool",15]]],[11,"eq","","",9,[[["utctime",3]],["bool",15]]],[11,"ne","","",9,[[["utctime",3]],["bool",15]]],[11,"eq","","",10,[[["generalizedtime",3]],["bool",15]]],[11,"ne","","",10,[[["generalizedtime",3]],["bool",15]]],[11,"eq","","",11,[[["taggeddervalue",3]],["bool",15]]],[11,"ne","","",11,[[["taggeddervalue",3]],["bool",15]]],[11,"eq","yasna","",15,[[["asn1error",3]],["bool",15]]],[11,"ne","","",15,[[["asn1error",3]],["bool",15]]],[11,"eq","","",1,[[["asn1errorkind",4]],["bool",15]]],[11,"eq","","",0,[[["bermode",4]],["bool",15]]],[11,"eq","","",4,[[["pcbit",4]],["bool",15]]],[11,"eq","","",5,[[["tagclass",4]],["bool",15]]],[11,"eq","","",6,[[["tag",3]],["bool",15]]],[11,"ne","","",6,[[["tag",3]],["bool",15]]],[11,"cmp","yasna::models","",7,[[["objectidentifier",3]],["ordering",4]]],[11,"cmp","","",9,[[["utctime",3]],["ordering",4]]],[11,"cmp","","",10,[[["generalizedtime",3]],["ordering",4]]],[11,"cmp","","",11,[[["taggeddervalue",3]],["ordering",4]]],[11,"cmp","yasna","",0,[[["bermode",4]],["ordering",4]]],[11,"cmp","","",4,[[["pcbit",4]],["ordering",4]]],[11,"cmp","","",5,[[["tagclass",4]],["ordering",4]]],[11,"cmp","","",6,[[["tag",3]],["ordering",4]]],[11,"partial_cmp","yasna::models","",7,[[["objectidentifier",3]],[["ordering",4],["option",4]]]],[11,"lt","","",7,[[["objectidentifier",3]],["bool",15]]],[11,"le","","",7,[[["objectidentifier",3]],["bool",15]]],[11,"gt","","",7,[[["objectidentifier",3]],["bool",15]]],[11,"ge","","",7,[[["objectidentifier",3]],["bool",15]]],[11,"partial_cmp","","",9,[[["utctime",3]],[["ordering",4],["option",4]]]],[11,"lt","","",9,[[["utctime",3]],["bool",15]]],[11,"le","","",9,[[["utctime",3]],["bool",15]]],[11,"gt","","",9,[[["utctime",3]],["bool",15]]],[11,"ge","","",9,[[["utctime",3]],["bool",15]]],[11,"partial_cmp","","",10,[[["generalizedtime",3]],[["ordering",4],["option",4]]]],[11,"lt","","",10,[[["generalizedtime",3]],["bool",15]]],[11,"le","","",10,[[["generalizedtime",3]],["bool",15]]],[11,"gt","","",10,[[["generalizedtime",3]],["bool",15]]],[11,"ge","","",10,[[["generalizedtime",3]],["bool",15]]],[11,"partial_cmp","","",11,[[["taggeddervalue",3]],[["ordering",4],["option",4]]]],[11,"lt","","",11,[[["taggeddervalue",3]],["bool",15]]],[11,"le","","",11,[[["taggeddervalue",3]],["bool",15]]],[11,"gt","","",11,[[["taggeddervalue",3]],["bool",15]]],[11,"ge","","",11,[[["taggeddervalue",3]],["bool",15]]],[11,"partial_cmp","yasna","",0,[[["bermode",4]],[["ordering",4],["option",4]]]],[11,"partial_cmp","","",4,[[["pcbit",4]],[["ordering",4],["option",4]]]],[11,"partial_cmp","","",5,[[["tagclass",4]],[["ordering",4],["option",4]]]],[11,"partial_cmp","","",6,[[["tag",3]],[["ordering",4],["option",4]]]],[11,"lt","","",6,[[["tag",3]],["bool",15]]],[11,"le","","",6,[[["tag",3]],["bool",15]]],[11,"gt","","",6,[[["tag",3]],["bool",15]]],[11,"ge","","",6,[[["tag",3]],["bool",15]]],[11,"hash","yasna::models","",7,[[]]],[11,"hash","","",9,[[]]],[11,"hash","","",10,[[]]],[11,"hash","","",11,[[]]],[11,"hash","yasna","",0,[[]]],[11,"hash","","",4,[[]]],[11,"hash","","",5,[[]]],[11,"hash","","",6,[[]]],[11,"from_str","yasna::models","",7,[[["str",15]],["result",4]]],[11,"as_ref","","",7,[[]]],[11,"clone","","",7,[[],["objectidentifier",3]]],[11,"clone","","",8,[[],["parseoiderror",3]]],[11,"clone","","",9,[[],["utctime",3]]],[11,"clone","","",10,[[],["generalizedtime",3]]],[11,"clone","","",11,[[],["taggeddervalue",3]]],[11,"clone","yasna","",15,[[],["asn1error",3]]],[11,"clone","","",1,[[],["asn1errorkind",4]]],[11,"clone","","",0,[[],["bermode",4]]],[11,"clone","","",4,[[],["pcbit",4]]],[11,"clone","","",5,[[],["tagclass",4]]],[11,"clone","","",6,[[],["tag",3]]],[11,"new","yasna::models","Constructs a new <code>ObjectIdentifier</code> from <code>Vec<u64></code>.",7,[[["vec",3],["u64",15]]]],[11,"from_slice","","Constructs a new <code>ObjectIdentifier</code> from <code>&[u64]</code>.",7,[[]]],[11,"components","","Borrows its internal vector of components.",7,[[],["vec",3]]],[11,"components_mut","","Mutably borrows its internal vector of components.",7,[[],["vec",3]]],[11,"into_components","","Extracts its internal vector of components.",7,[[],[["vec",3],["u64",15]]]],[11,"parse","","Parses ASN.1 string representation of UTCTime.",9,[[],["option",4]]],[11,"from_datetime","","Constructs <code>UTCTime</code> from a datetime.",9,[[["datetime",3]]]],[11,"from_datetime_opt","","Constructs <code>UTCTime</code> from a datetime.",9,[[["datetime",3]],["option",4]]],[11,"datetime","","Returns the datetime it represents.",9,[[],["datetime",3]]],[11,"to_bytes","","Returns ASN.1 canonical representation of the datetime as …",9,[[],[["vec",3],["u8",15]]]],[11,"to_string","","Returns ASN.1 canonical representation of the datetime as …",9,[[],["string",3]]],[11,"parse","","Parses ASN.1 string representation of GeneralizedTime.",10,[[],["option",4]]],[11,"parse_with_timezone","","Parses ASN.1 string representation of GeneralizedTime, …",10,[[],["option",4]]],[11,"from_datetime","","Constructs <code>GeneralizedTime</code> from a datetime.",10,[[["datetime",3]]]],[11,"from_datetime_opt","","Constructs <code>GeneralizedTime</code> from a datetime.",10,[[["datetime",3]],["option",4]]],[11,"from_datetime_and_sub_nano","","Constructs <code>GeneralizedTime</code> from a datetime and …",10,[[["datetime",3]]]],[11,"from_datetime_and_sub_nano_opt","","Constructs <code>GeneralizedTime</code> from a datetime and …",10,[[["datetime",3]],["option",4]]],[11,"datetime","","Returns the datetime it represents, discarding …",10,[[],["datetime",3]]],[11,"sub_nano","","Returns sub-nanoseconds digits of the datetime.",10,[[]]],[11,"to_bytes","","Returns ASN.1 canonical representation of the datetime as …",10,[[],[["vec",3],["u8",15]]]],[11,"to_string","","Returns ASN.1 canonical representation of the datetime as …",10,[[],["string",3]]],[11,"from_octetstring","","Constructs a new <code>TaggedDerValue</code> as an octet string",11,[[["vec",3],["u8",15]]]],[11,"from_tag_and_bytes","","Constructs a new <code>TaggedDerValue</code> from its tag and content",11,[[["u8",15],["vec",3],["tag",3]]]],[11,"from_tag_pc_and_bytes","","Constructs a new <code>TaggedDerValue</code> from its tag, …",11,[[["pcbit",4],["tag",3],["u8",15],["vec",3]]]],[11,"tag","","Returns the tag",11,[[],["tag",3]]],[11,"pcbit","","Returns the primitive/constructed bit",11,[[],["pcbit",4]]],[11,"value","","Returns the value",11,[[]]],[11,"as_bytes","","If the value is something that contains raw bytes, …",11,[[],["option",4]]],[11,"as_str","","If the value is something string-like, returns it as …",11,[[],[["option",4],["str",15]]]],[11,"write_bool","yasna","Writes <code>bool</code> as an ASN.1 BOOLEAN value.",12,[[["bool",15]]]],[11,"write_enum","","Writes <code>i64</code> as an ASN.1 ENUMERATED value.",12,[[["i64",15]]]],[11,"write_i64","","Writes <code>i64</code> as an ASN.1 INTEGER value.",12,[[["i64",15]]]],[11,"write_u64","","Writes <code>u64</code> as an ASN.1 INTEGER value.",12,[[["u64",15]]]],[11,"write_i32","","Writes <code>i32</code> as an ASN.1 INTEGER value.",12,[[["i32",15]]]],[11,"write_u32","","Writes <code>u32</code> as an ASN.1 INTEGER value.",12,[[["u32",15]]]],[11,"write_i16","","Writes <code>i16</code> as an ASN.1 INTEGER value.",12,[[["i16",15]]]],[11,"write_u16","","Writes <code>u16</code> as an ASN.1 INTEGER value.",12,[[["u16",15]]]],[11,"write_i8","","Writes <code>i8</code> as an ASN.1 INTEGER value.",12,[[["i8",15]]]],[11,"write_u8","","Writes <code>u8</code> as an ASN.1 INTEGER value.",12,[[["u8",15]]]],[11,"write_bigint","","Writes <code>BigInt</code> as an ASN.1 INTEGER value.",12,[[["bigint",3]]]],[11,"write_biguint","","Writes <code>BigUint</code> as an ASN.1 INTEGER value.",12,[[["biguint",3]]]],[11,"write_bitvec","","Writes <code>BitVec</code> as an ASN.1 BITSTRING value.",12,[[["bitvec",3]]]],[11,"write_bitvec_bytes","","Writes <code>&[u8]</code> and <code>usize</code> as an ASN.1 BITSTRING value.",12,[[["usize",15]]]],[11,"write_bytes","","Writes <code>&[u8]</code> as an ASN.1 OCTETSTRING value.",12,[[]]],[11,"write_utf8_string","","Writes <code>&str</code> as an ASN.1 UTF8String value.",12,[[["str",15]]]],[11,"write_ia5_string","","Writes <code>&str</code> as an ASN.1 IA5String value.",12,[[["str",15]]]],[11,"write_bmp_string","","Writes <code>&str</code> as an ASN.1 BMPString value.",12,[[["str",15]]]],[11,"write_null","","Writes the ASN.1 NULL value.",12,[[]]],[11,"write_oid","","Writes an ASN.1 object identifier.",12,[[["objectidentifier",3]]]],[11,"write_utf8string","","Writes an ASN.1 UTF8String.",12,[[["str",15]]]],[11,"write_sequence","","Writes ASN.1 SEQUENCE.",12,[[]]],[11,"write_sequence_of","","Writes ASN.1 SEQUENCE OF.",12,[[]]],[11,"write_set","","Writes ASN.1 SET.",12,[[]]],[11,"write_set_of","","Writes ASN.1 SET OF.",12,[[]]],[11,"write_numeric_string","","Writes an ASN.1 NumericString.",12,[[["str",15]]]],[11,"write_printable_string","","Writes an ASN.1 PrintableString.",12,[[["str",15]]]],[11,"write_utctime","","Writes an ASN.1 UTCTime.",12,[[["utctime",3]]]],[11,"write_generalized_time","","Writes an ASN.1 GeneralizedTime.",12,[[["generalizedtime",3]]]],[11,"write_visible_string","","Writes an ASN.1 VisibleString.",12,[[["str",15]]]],[11,"write_tagged","","Writes a (explicitly) tagged value.",12,[[["tag",3]]]],[11,"write_tagged_implicit","","Writes an implicitly tagged value.",12,[[["tag",3]]]],[11,"write_tagged_der","","Writes the arbitrary tagged DER value in <code>der</code>.",12,[[["taggeddervalue",3]]]],[11,"write_der","","Writes <code>&[u8]</code> into the DER output buffer directly. …",12,[[]]],[11,"next","","Generates a new [<code>DERWriter</code>].",13,[[],["derwriter",3]]],[11,"next","","Generates a new [<code>DERWriter</code>].",14,[[],["derwriter",3]]],[11,"new","","",15,[[["asn1errorkind",4]]]],[11,"kind","","",15,[[],["asn1errorkind",4]]],[11,"mode","","Tells which format we are parsing, BER or DER.",16,[[],["bermode",4]]],[11,"read_bool","","Reads an ASN.1 BOOLEAN value as <code>bool</code>.",16,[[],[["bool",15],["asn1result",6]]]],[11,"read_enum","","Reads an ASN.1 ENUMERATED value as <code>i64</code>.",16,[[],[["i64",15],["asn1result",6]]]],[11,"read_i64","","Reads an ASN.1 INTEGER value as <code>i64</code>.",16,[[],[["i64",15],["asn1result",6]]]],[11,"read_u64","","Reads an ASN.1 INTEGER value as <code>u64</code>.",16,[[],[["u64",15],["asn1result",6]]]],[11,"read_i32","","Reads an ASN.1 INTEGER value as <code>i32</code>.",16,[[],[["i32",15],["asn1result",6]]]],[11,"read_u32","","Reads an ASN.1 INTEGER value as <code>u32</code>.",16,[[],[["u32",15],["asn1result",6]]]],[11,"read_i16","","Reads an ASN.1 INTEGER value as <code>i16</code>.",16,[[],[["asn1result",6],["i16",15]]]],[11,"read_u16","","Reads an ASN.1 INTEGER value as <code>u16</code>.",16,[[],[["asn1result",6],["u16",15]]]],[11,"read_i8","","Reads an ASN.1 INTEGER value as <code>i8</code>.",16,[[],[["asn1result",6],["i8",15]]]],[11,"read_u8","","Reads an ASN.1 INTEGER value as <code>u8</code>.",16,[[],[["asn1result",6],["u8",15]]]],[11,"read_bigint","","Reads an ASN.1 INTEGER value as <code>BigInt</code>.",16,[[],[["bigint",3],["asn1result",6]]]],[11,"read_biguint","","Reads an ASN.1 INTEGER value as <code>BigUint</code>.",16,[[],[["asn1result",6],["biguint",3]]]],[11,"read_bitvec","","Reads an ASN.1 BITSTRING value as <code>BitVec</code>.",16,[[],[["bitvec",3],["asn1result",6]]]],[11,"read_bitvec_bytes","","Reads an ASN.1 BITSTRING value as <code>(Vec<u8>, usize)</code>.",16,[[],["asn1result",6]]],[11,"read_bytes","","Reads an ASN.1 OCTETSTRING value as <code>Vec<u8></code>.",16,[[],[["asn1result",6],["vec",3]]]],[11,"read_null","","Reads the ASN.1 NULL value.",16,[[],["asn1result",6]]],[11,"read_oid","","Reads an ASN.1 object identifier.",16,[[],[["objectidentifier",3],["asn1result",6]]]],[11,"read_utf8string","","Reads an ASN.1 UTF8String.",16,[[],[["string",3],["asn1result",6]]]],[11,"read_sequence","","Reads an ASN.1 SEQUENCE value.",16,[[],["asn1result",6]]],[11,"read_sequence_of","","Reads an ASN.1 SEQUENCE OF value.",16,[[],["asn1result",6]]],[11,"collect_sequence_of","","Collects an ASN.1 SEQUENCE OF value.",16,[[],[["vec",3],["asn1result",6]]]],[11,"read_set","","Reads an ASN.1 SET value.",16,[[],["asn1result",6]]],[11,"read_set_of","","Reads an ASN.1 SET OF value.",16,[[],["asn1result",6]]],[11,"collect_set_of","","Collects an ASN.1 SET OF value.",16,[[],[["vec",3],["asn1result",6]]]],[11,"read_numeric_string","","Reads an ASN.1 NumericString.",16,[[],[["string",3],["asn1result",6]]]],[11,"read_printable_string","","Reads an ASN.1 PrintableString.",16,[[],[["string",3],["asn1result",6]]]],[11,"read_ia5_string","","Reads an ASN.1 IA5String.",16,[[],[["string",3],["asn1result",6]]]],[11,"read_bmp_string","","Reads an ASN.1 BMPString.",16,[[],[["string",3],["asn1result",6]]]],[11,"read_utctime","","Reads an ASN.1 UTCTime.",16,[[],[["asn1result",6],["utctime",3]]]],[11,"read_generalized_time","","Reads an ASN.1 GeneralizedTime.",16,[[],[["generalizedtime",3],["asn1result",6]]]],[11,"read_visible_string","","Reads an ASN.1 VisibleString.",16,[[],[["string",3],["asn1result",6]]]],[11,"read_tagged","","Reads a (explicitly) tagged value.",16,[[["tag",3]],["asn1result",6]]],[11,"read_tagged_implicit","","Reads an implicitly tagged value.",16,[[["tag",3]],["asn1result",6]]],[11,"lookahead_tag","","Lookaheads the tag in the next value. Used to parse …",16,[[],[["asn1result",6],["tag",3]]]],[11,"read_with_buffer","","",16,[[],["asn1result",6]]],[11,"read_tagged_der","","Read an arbitrary (tag, value) pair as a TaggedDerValue. …",16,[[],[["taggeddervalue",3],["asn1result",6]]]],[11,"read_der","","Reads a DER object as raw bytes. Tag and length are …",16,[[],[["asn1result",6],["vec",3]]]],[11,"mode","","Tells which format we are parsing, BER or DER.",17,[[],["bermode",4]]],[11,"next","","Generates a new [<code>BERReader</code>].",17,[[],["berreader",3]]],[11,"read_optional","","Tries to read an ASN.1 value. If it fails at the first …",17,[[],[["option",4],["asn1result",6]]]],[11,"read_default","","Similar to <code>read_optional</code>, but uses <code>default</code> if it fails.",17,[[],["asn1result",6]]],[11,"read_with_buffer","","",17,[[],["asn1result",6]]],[11,"mode","","Tells which format we are parsing, BER or DER.",18,[[],["bermode",4]]],[11,"next","","Generates a new [<code>BERReader</code>].",18,[[],[["asn1result",6],["berreader",3]]]],[11,"read_optional","","If there is a set element with a tag in <code>tag_hint</code>, reads …",18,[[],[["option",4],["asn1result",6]]]],[11,"read_default","","Similar to <code>read_optional</code>, but uses <code>default</code> if it fails.",18,[[],["asn1result",6]]]],"p":[[4,"BERMode"],[4,"ASN1ErrorKind"],[8,"BERDecodable"],[8,"DEREncodable"],[4,"PCBit"],[4,"TagClass"],[3,"Tag"],[3,"ObjectIdentifier"],[3,"ParseOidError"],[3,"UTCTime"],[3,"GeneralizedTime"],[3,"TaggedDerValue"],[3,"DERWriter"],[3,"DERWriterSeq"],[3,"DERWriterSet"],[3,"ASN1Error"],[3,"BERReader"],[3,"BERReaderSeq"],[3,"BERReaderSet"]]}\
}');
addSearchOptions(searchIndex);initSearch(searchIndex);